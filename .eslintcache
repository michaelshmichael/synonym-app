[{"C:\\Users\\user\\Desktop\\word-associations\\src\\index.js":"1","C:\\Users\\user\\Desktop\\word-associations\\src\\reportWebVitals.js":"2","C:\\Users\\user\\Desktop\\word-associations\\src\\components\\Routes.js":"3","C:\\Users\\user\\Desktop\\word-associations\\src\\components\\Header.js":"4","C:\\Users\\user\\Desktop\\word-associations\\src\\components\\Footer.js":"5","C:\\Users\\user\\Desktop\\word-associations\\src\\components\\Registration.js":"6","C:\\Users\\user\\Desktop\\word-associations\\src\\components\\Login.js":"7","C:\\Users\\user\\Desktop\\word-associations\\src\\components\\Landing.js":"8","C:\\Users\\user\\Desktop\\word-associations\\src\\components\\Search.js":"9","C:\\Users\\user\\Desktop\\word-associations\\src\\components\\Vocab.js":"10","C:\\Users\\user\\Desktop\\word-associations\\src\\components\\Set.js":"11","C:\\Users\\user\\Desktop\\word-associations\\src\\components\\VocabInfo.js":"12","C:\\Users\\user\\Desktop\\word-associations\\src\\components\\QuizSelect.js":"13","C:\\Users\\user\\Desktop\\word-associations\\src\\api.js":"14","C:\\Users\\user\\Desktop\\word-associations\\src\\components\\Sidebar.js":"15","C:\\Users\\user\\Desktop\\word-associations\\src\\components\\Buddies.js":"16","C:\\Users\\user\\Desktop\\word-associations\\src\\components\\BuddiesDisplay.js":"17","C:\\Users\\user\\Desktop\\word-associations\\src\\components\\QuizComponents\\Quiz.js":"18","C:\\Users\\user\\Desktop\\word-associations\\src\\components\\QuizComponents\\QuizAnswerSelect\\QuizAnswerSelect.js":"19","C:\\Users\\user\\Desktop\\word-associations\\src\\components\\QuizComponents\\QuizAnswerSelect\\QuizScoreTally.js":"20","C:\\Users\\user\\Desktop\\word-associations\\src\\components\\QuizComponents\\QuizAnswerSelect\\QuizWord.js":"21","C:\\Users\\user\\Desktop\\word-associations\\src\\components\\QuizComponents\\QuizResults\\QuizResults.js":"22","C:\\Users\\user\\Desktop\\word-associations\\src\\components\\ProfileComponents\\Profile.js":"23","C:\\Users\\user\\Desktop\\word-associations\\src\\components\\ProfileComponents\\LanguagesBeingStudied.js":"24"},{"size":347,"mtime":1613718437469,"results":"25","hashOfConfig":"26"},{"size":375,"mtime":1613718437470,"results":"27","hashOfConfig":"26"},{"size":4515,"mtime":1615392352610,"results":"28","hashOfConfig":"26"},{"size":1075,"mtime":1615015223790,"results":"29","hashOfConfig":"26"},{"size":764,"mtime":1613718437458,"results":"30","hashOfConfig":"26"},{"size":6880,"mtime":1614089047148,"results":"31","hashOfConfig":"26"},{"size":2629,"mtime":1614082860046,"results":"32","hashOfConfig":"26"},{"size":911,"mtime":1613718437460,"results":"33","hashOfConfig":"26"},{"size":8155,"mtime":1613740408932,"results":"34","hashOfConfig":"26"},{"size":5252,"mtime":1615016539849,"results":"35","hashOfConfig":"26"},{"size":8208,"mtime":1615390647052,"results":"36","hashOfConfig":"26"},{"size":5882,"mtime":1615016896726,"results":"37","hashOfConfig":"26"},{"size":2611,"mtime":1614088941732,"results":"38","hashOfConfig":"26"},{"size":514,"mtime":1613718437456,"results":"39","hashOfConfig":"26"},{"size":566,"mtime":1614420168432,"results":"40","hashOfConfig":"26"},{"size":2995,"mtime":1614426927272,"results":"41","hashOfConfig":"26"},{"size":423,"mtime":1614694770169,"results":"42","hashOfConfig":"26"},{"size":7889,"mtime":1615388073422,"results":"43","hashOfConfig":"26"},{"size":1224,"mtime":1615388009023,"results":"44","hashOfConfig":"26"},{"size":257,"mtime":1615388009430,"results":"45","hashOfConfig":"26"},{"size":169,"mtime":1615388010170,"results":"46","hashOfConfig":"26"},{"size":1534,"mtime":1615388142450,"results":"47","hashOfConfig":"26"},{"size":6893,"mtime":1615392703148,"results":"48","hashOfConfig":"26"},{"size":724,"mtime":1615392711761,"results":"49","hashOfConfig":"26"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},"178xhwb",{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"69","usedDeprecatedRules":"52"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"72","usedDeprecatedRules":"52"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"75","messages":"76","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"77","usedDeprecatedRules":"52"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"80","usedDeprecatedRules":"52"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"87","usedDeprecatedRules":"52"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"92","messages":"93","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"94","messages":"95","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"96","messages":"97","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"98","messages":"99","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"100","messages":"101","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"102","messages":"103","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\user\\Desktop\\word-associations\\src\\index.js",[],["104","105"],"C:\\Users\\user\\Desktop\\word-associations\\src\\reportWebVitals.js",[],"C:\\Users\\user\\Desktop\\word-associations\\src\\components\\Routes.js",["106"],"C:\\Users\\user\\Desktop\\word-associations\\src\\components\\Header.js",[],"C:\\Users\\user\\Desktop\\word-associations\\src\\components\\Footer.js",[],"C:\\Users\\user\\Desktop\\word-associations\\src\\components\\Registration.js",[],"C:\\Users\\user\\Desktop\\word-associations\\src\\components\\Login.js",[],"C:\\Users\\user\\Desktop\\word-associations\\src\\components\\Landing.js",[],"C:\\Users\\user\\Desktop\\word-associations\\src\\components\\Search.js",["107","108"],"import React, { useRef, useState, useEffect } from 'react';\r\nimport APIEndpoints from '../api';\r\nimport { BiMessageSquareAdd } from 'react-icons/bi';\r\nimport axios from 'axios';\r\nimport Sidebar from './Sidebar.js';\r\nimport unitedKingdom from '../svg/unitedKingdom.svg';\r\nimport russia from '../svg/russia.svg';\r\nimport portugal from '../svg/portugal.svg';\r\nimport italy from '../svg/italy.svg';\r\nimport france from '../svg/france.svg';\r\nimport germany from '../svg/germany.svg';\r\nimport spain from '../svg/spain.svg';\r\nimport '../styles/Search.scss';\r\n\r\nexport default function Search(props) {\r\n    const [searchWord, setSearchWord] = useState('');\r\n    const [associationArray, setAssociationArray] = useState([]);\r\n    const [activeUser, setActiveUser] = useState('');\r\n    const [uniqueId, setUniqueId] = useState('');\r\n    const inputRef = useRef();\r\n    const searchButton = useRef();\r\n    \r\n    // Rename this\r\n    let searchHeader;\r\n    if (props.language === 'en') {\r\n        searchHeader = 'Search in English';\r\n    } else if (props.language === 'ru') {\r\n        searchHeader = 'Search in Russian';\r\n    } else if (props.language === 'pt') {\r\n        searchHeader = 'Search in Portuguese'\r\n    } else if (props.language === 'de') {\r\n        searchHeader = 'Search in German';\r\n    } else if (props.language === 'fr') {\r\n        searchHeader = 'Search in French';\r\n    } else if (props.language === 'it') {\r\n        searchHeader = 'Search in Italian';\r\n    } else if (props.language === 'es') {\r\n        searchHeader = 'Search in Spanish';\r\n    }\r\n\r\n    // These two functions are repeated from the profile page. Could be refactored I'm sure.\r\n    useEffect(() => {\r\n        async function getUserData () {\r\n            try {\r\n                const allUsers = await axios.get(APIEndpoints.userDataEndpoint, {withCredentials: true});\r\n                getActiveUser(allUsers);\r\n                console.log('ALL USERS')\r\n                console.log(allUsers)\r\n            } catch (error) {\r\n                console.error(error);\r\n            }\r\n        }\r\n        getUserData();\r\n    },[]);\r\n\r\n    const getActiveUser = (allUsers) => {\r\n        const currentActiveUser = allUsers.data.find(element => element.data.username === props.user);\r\n        setActiveUser(currentActiveUser);\r\n        setUniqueId(currentActiveUser.uniqueId);\r\n    };\r\n\r\n    const createNewSearchFromResult = (e) =>  {\r\n        setSearchWord(e);\r\n        inputRef.current.value = e;\r\n        searchButton.current.focus();\r\n    };\r\n\r\n    class association {\r\n        constructor(meaning, partOfSpeech, weight){\r\n            this.meaning = meaning\r\n            this.partOfSpeech = partOfSpeech;\r\n            this.weight = weight;\r\n        }\r\n    };\r\n    \r\n    async function _getAssociations () {\r\n        try {\r\n            let data = await fetch(`https://api.wordassociations.net/associations/v1.0/json/search?apikey=5b4acb51-a76e-4d05-9349-8044794dea94&text=${searchWord}&lang=${props.language}&limit=10`, \r\n            {mode: 'no-cors'},\r\n            {'Access-Control-Allow-Origin': '*'})\r\n            let words = await data.json()\r\n            console.log(words)\r\n            return words\r\n        } catch {\r\n            console.log('Error')\r\n        }\r\n    };\r\n\r\n    const _makeAssociationData = (data, i) => {\r\n        let defaultAssociation = new association();\r\n        defaultAssociation.meaning = data.response[0].items[i].item\r\n        defaultAssociation.partOfSpeech = data.response[0].items[i].pos\r\n        defaultAssociation.weight = data.response[0].items[i].weight\r\n        return defaultAssociation\r\n    }\r\n    \r\n    async function setAssociations () {\r\n        let words = await _getAssociations()\r\n        if(words.response[0].items.length !== 0) {\r\n            let placeholderArray = []\r\n            for(let i=0; i < 10; i++) {\r\n                let association =_makeAssociationData(words, i)\r\n                placeholderArray.push(association)\r\n            }\r\n            setAssociationArray(placeholderArray)\r\n        } else {\r\n            alert('Try new word')\r\n        }  \r\n    };\r\n\r\n    const addWordToActiveUserVocab = (newAssociatedWord) => {\r\n        let updatedVocab\r\n        if(activeUser.data.vocab.miscellaneous){\r\n            updatedVocab = [...activeUser.data.vocab.miscellaneous, newAssociatedWord]\r\n        } else {\r\n            updatedVocab = [newAssociatedWord]\r\n        }\r\n        setActiveUser((prevState) => {\r\n            const newState = Object.assign({}, prevState);\r\n            newState.data.vocab.miscellaneous = updatedVocab;\r\n            return newState;\r\n        });\r\n        console.log(activeUser.data.vocab.miscellaneous)\r\n    };\r\n\r\n    useEffect(() => {\r\n        if(uniqueId){\r\n            async function updateUserAssociatedWords() {\r\n                console.log('Associated Words')\r\n                console.log(activeUser)\r\n                try {\r\n                    const updatedUser = await axios.put(`https://app.yawe.dev/api/1/ce/non-auth-endpoint?key=b0188b53ea77419ba1d6dcda06e4bea9&uniqueId=${uniqueId}`, \r\n                    activeUser.data,\r\n                    { withCredentials: true },\r\n                    { headers: {'Content-Type': 'application/json'}}\r\n                    )\r\n                    console.log('UPDATED USER')\r\n                    console.log(updatedUser.data)\r\n                } catch (error) {\r\n                    console.log(error)\r\n                }\r\n            }\r\n            updateUserAssociatedWords();\r\n        };\r\n    }, [activeUser])\r\n\r\n    return (\r\n        <div className='search-page-container'>\r\n            <Sidebar className='sidebar'></Sidebar>\r\n            <div className='search-and-results-container'>\r\n                <div className='language-flags-container'>\r\n                    <img className='language-flags' src={unitedKingdom} alt='united-kingdom' onClick={e => props.setLanguage('en')}/>\r\n                    <img className='language-flags' src={russia} alt='russia' onClick={e => props.setLanguage('ru')}/>\r\n                    <img className='language-flags' src={portugal} alt='portugal' onClick={e => props.setLanguage('pt')}/>\r\n                    <img className='language-flags' src={italy} alt='italy' onClick={e => props.setLanguage('it')}/>\r\n                    <img className='language-flags' src={germany} alt='germany' onClick={e => props.setLanguage('de')}/>\r\n                    <img className='language-flags' src={spain} alt='spain' onClick={e => props.setLanguage('es')}/>\r\n                    <img className='language-flags' src={france} alt='france' onClick={e => props.setLanguage('fr')}/>\r\n                    \r\n                </div>\r\n                <div className='search-container'>\r\n                    <h2>{searchHeader}</h2>\r\n                    <div className='search-input-and-button'>\r\n                        <input ref={inputRef} type='text' className='search-input-text' \r\n                        onChange={e => setSearchWord(e.target.value)}>\r\n                        </input>\r\n                        <button ref={searchButton} className='find-synonyms-button' \r\n                        onClick={setAssociations}>Find Associations\r\n                        </button>\r\n                    </div>\r\n                </div>\r\n                <div className='association-container'>\r\n                {associationArray.map((word) => {\r\n                    return<div data-index={word.meaning} className='association-box' onClick={e => createNewSearchFromResult(e.target.dataset.index)}>\r\n                        <p data-index={word.meaning}>{word.meaning}</p>\r\n                        <BiMessageSquareAdd\r\n                            className='add-word-icon'\r\n                            data-index={word.meaning}\r\n                            onClick={e => addWordToActiveUserVocab(e.target.dataset.index)}\r\n                        />\r\n                        <p data-index={word.meaning}>{word.partOfSpeech}</p>\r\n                        <p data-index={word.meaning}>{word.weight}</p>\r\n                        \r\n                    </div>\r\n                })}\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n","C:\\Users\\user\\Desktop\\word-associations\\src\\components\\Vocab.js",["109","110"],"import React, { useEffect, useState } from 'react';\r\nimport { useHistory } from 'react-router-dom';\r\nimport { useParams } from 'react-router-dom';\r\nimport { FiTrash} from 'react-icons/fi';\r\nimport { BiPlusCircle } from 'react-icons/bi';\r\nimport { toast } from 'react-toastify'; \r\nimport axios from 'axios';\r\nimport APIEndpoints from '../api';\r\nimport Sidebar from '../components/Sidebar';\r\nimport 'react-toastify/dist/ReactToastify.css';\r\nimport '../styles/Vocab.scss';\r\n\r\ntoast.configure();\r\n\r\nexport default function Vocab (props) {\r\n    const [activeUser, setActiveUser] = useState('');\r\n    const [uniqueId, setUniqueId] = useState('');\r\n    const [vocabSetsArray, setVocabSetsArray] = useState([]);\r\n    const [newSetName, setNewSetName] = useState('');\r\n    const history = useHistory();\r\n    const { profile } = useParams();\r\n    \r\n    // These two functions are repeated from the profile page. Could be refactored I'm sure.\r\n    useEffect(() => {\r\n        async function getUserData () {\r\n            try {\r\n                const allUsers = await axios.get(APIEndpoints.userDataEndpoint, {withCredentials: true});\r\n                getActiveUser(allUsers);\r\n            } catch (error) {\r\n                console.error(error);\r\n            }\r\n        }\r\n        getUserData();\r\n    },[]);\r\n\r\n    const getActiveUser = (allUsers) => {\r\n        const currentActiveUser = allUsers.data.find(element => element.data.username === props.user);\r\n        console.log(currentActiveUser)\r\n        setUniqueId(currentActiveUser.uniqueId);\r\n        setActiveUser(currentActiveUser);\r\n        let vocabSetsArray = Object.keys(currentActiveUser.data.vocab)\r\n        setVocabSetsArray(vocabSetsArray)\r\n    };\r\n\r\n    const redirectToSet = (e) => {\r\n        let vocabSetURL = e.target.dataset.index;\r\n        history.push(`/${profile}/vocab/${vocabSetURL}`);\r\n    }\r\n\r\n    const deleteSet = (event) => {\r\n        event.stopPropagation();\r\n        let vocabSetName = event.target.dataset.index\r\n        let updatedVocabSets = vocabSetsArray.filter(element => element !== vocabSetName);\r\n        if(window.confirm('Really Delete Set?')){\r\n            delete activeUser.data.vocab[vocabSetName]\r\n            setActiveUser((prevState) => {\r\n                const newState = Object.assign({}, prevState);\r\n                return newState;\r\n            });\r\n            setVocabSetsArray(updatedVocabSets)\r\n            toast.info(`${vocabSetName} deleted`, { autoClose: 1000 })\r\n        } else {\r\n            return;\r\n        }\r\n    };\r\n\r\n    const addSet = () => {\r\n        if(newSetName === ''){\r\n            return;\r\n        } else {\r\n            setActiveUser((prevState) => {\r\n                const newState = Object.assign({}, prevState);\r\n                newState.data.vocab[newSetName] = [];\r\n                return newState;\r\n            });\r\n            setVocabSetsArray(vocabSetsArray.concat(newSetName))\r\n            setNewSetName('');\r\n        }\r\n    };\r\n\r\n    useEffect(() => {\r\n        if(uniqueId){\r\n            props.updateUser(uniqueId, activeUser);\r\n        }\r\n    }, [activeUser])\r\n\r\n    if(!activeUser) {\r\n        return(\r\n            <div className='sets-page-container'>\r\n                <Sidebar className='sidebar'></Sidebar>\r\n                <div className='sets-main-container'>\r\n                    <div className=\"lds-ellipsis\"><div></div><div></div><div></div><div></div></div>\r\n                </div>\r\n            </div>\r\n        )\r\n    } else {\r\n        return(\r\n            <div className='sets-page-container'>\r\n                <Sidebar className='sidebar'></Sidebar>\r\n                <div className='sets-main-container'>\r\n                    <div className='sets-have-loaded'>\r\n                        <h1 className='sets-main-title'>Your Sets</h1>\r\n                        <div className='sets-add-container'>\r\n                            <h2 className='sets-add'>Add Set</h2>\r\n                            <input type='text' \r\n                                value={newSetName} \r\n                                className= 'new-set-input-box'\r\n                                onChange={e => setNewSetName(e.target.value)}/>\r\n                            <BiPlusCircle className='bi-plus-circle' onClick={addSet}/>\r\n                        </div>\r\n                        <div className='sets-box-container'>\r\n                            {vocabSetsArray.map((set, index) => (\r\n                                <div\r\n                                data-index={set}\r\n                                key={index}\r\n                                className='set-box'\r\n                                onClick={e => redirectToSet(e)}>\r\n                                    <h1 data-index={set}\r\n                                    >{set}</h1>\r\n                                        <div className='delete-set'>\r\n                                        <FiTrash data-index={set}  \r\n                                        onClick={e => deleteSet(e)}\r\n                                        />\r\n                                        </div>\r\n                                </div>\r\n                            ))}\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}","C:\\Users\\user\\Desktop\\word-associations\\src\\components\\Set.js",["111","112"],"C:\\Users\\user\\Desktop\\word-associations\\src\\components\\VocabInfo.js",["113","114"],"import React, { useState, useEffect } from 'react';\r\nimport { useParams } from 'react-router-dom';\r\nimport axios from 'axios';\r\nimport APIEndpoints from '../api';\r\nimport Sidebar from './Sidebar';\r\nimport '../styles/VocabInfo.scss';\r\n\r\nexport default function VocabInfo (props) {\r\n    const [activeUser, setActiveUser] = useState('');\r\n    const [uniqueId, setUniqueId] = useState('');\r\n    const [wordObject, setWordObject] = useState('');\r\n    const [definitionNumber, setDefinitionNumber] = useState(0);\r\n    const { set, vocabItem } = useParams(); \r\n    \r\n    useEffect(() => {\r\n        async function getUserData () {\r\n            try {\r\n                const allUsers = await axios.get(APIEndpoints.userDataEndpoint, {withCredentials: true});\r\n                getActiveUser(allUsers);\r\n            } catch (error) {\r\n                console.error(error);\r\n            }\r\n        }\r\n        getUserData();\r\n    },[]);\r\n\r\n    const getActiveUser = (allUsers) => {\r\n        const currentActiveUser = allUsers.data.find(element => element.data.username === props.user);\r\n        setActiveUser(currentActiveUser);\r\n        setUniqueId(currentActiveUser.uniqueId);\r\n        let currentWord = currentActiveUser.data.vocab[set].find(({word}) => word === vocabItem)\r\n        setWordObject(currentWord);\r\n    };\r\n\r\n    const updateExplanation = (e) => {\r\n        console.log(e.target.value)\r\n        let currentWord = activeUser.data.vocab[set].find(({word}) => word === vocabItem)\r\n        setActiveUser((prevState) => {\r\n            const newState = Object.assign({}, prevState);\r\n            currentWord.explanation = e.target.value;\r\n            return newState;\r\n        });\r\n    };\r\n\r\n    const updateExample = (e) => {\r\n        console.log(e.target.value)\r\n        let currentWord = activeUser.data.vocab[set].find(({word}) => word === vocabItem)\r\n        setActiveUser((prevState) => {\r\n            const newState = Object.assign({}, prevState);\r\n            currentWord.example = e.target.value;\r\n            return newState;\r\n        });\r\n    }\r\n\r\n    const displayNextDefinition = (e) => {\r\n        let newDefinitionNumber;\r\n        switch(e.target.dataset.index){\r\n        case 'next': \r\n            newDefinitionNumber = definitionNumber +1\r\n            if (newDefinitionNumber === wordObject.definitions.length) {newDefinitionNumber = 0}\r\n            setDefinitionNumber(newDefinitionNumber)\r\n            break;\r\n        case 'previous':\r\n            newDefinitionNumber = definitionNumber -1\r\n            if (newDefinitionNumber === -1) {newDefinitionNumber = wordObject.definitions.length-1}\r\n            setDefinitionNumber(newDefinitionNumber)\r\n            break;\r\n        default: \r\n            break;\r\n        }\r\n    }\r\n\r\n    const removeCurrentDefinition = (e) => {\r\n        if(window.confirm('Delete')) {\r\n            let updatedDefinitions1 = wordObject.definitions.slice(0, definitionNumber)\r\n            let updatedDefinitions2 = wordObject.definitions.slice(definitionNumber+1)\r\n            let newDefinitions = [...updatedDefinitions1, ...updatedDefinitions2]\r\n            let currentWord = activeUser.data.vocab[set].find(({word}) => word === vocabItem)\r\n            setActiveUser((prevState) => {\r\n                const newState = Object.assign({}, prevState);\r\n                currentWord.definitions = newDefinitions\r\n                return newState;\r\n            });\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        props.updateUser(uniqueId, activeUser);\r\n    }, [activeUser])\r\n    \r\n    if(!wordObject) {\r\n        return(\r\n            <div className='vocab-item-page-container'>\r\n                <Sidebar className='sidebar'></Sidebar>\r\n                <div className='vocab-item-main-container'>\r\n                    <div className=\"lds-ellipsis\"><div></div><div></div><div></div><div></div></div>\r\n                </div>\r\n            </div>\r\n        )\r\n    } else {\r\n        return(\r\n            <div className='vocab-item-page-container'>\r\n                <Sidebar className='sidebar'></Sidebar>\r\n                <div className='vocab-item-main-container'>\r\n                    <div className='vocab-item-has-loaded'>\r\n                        <div className='vocab-item-user-data'>\r\n                            <h1 className='vocab-item-word'>Word: {vocabItem}</h1>\r\n                            <h1 className='vocab-item-definition'>Your Explanation: </h1>\r\n                            <input className='vocab-item-definition-input' type='text' \r\n                            placeholder={wordObject.explanation}\r\n                            onChange={e => updateExplanation(e)}\r\n                            />\r\n                        </div>\r\n                        \r\n                        <div className='vocab-item-api-data'>\r\n                            <h3>Pronunciation</h3>\r\n                                <h3>{wordObject.pronunciation}</h3>\r\n                            <h3>Definition</h3>\r\n                            <button data-index='previous' onClick={e => displayNextDefinition(e)}>Previous</button>\r\n                            <button data-index='next' onClick={e => displayNextDefinition(e)}>Next</button>\r\n                            \r\n                                <h3>{wordObject.definitions[definitionNumber]}</h3>\r\n                            <button data-index={vocabItem} onClick={removeCurrentDefinition}>Delete</button>\r\n                        </div>\r\n                        <div className='vocab-item-example'>\r\n                            <h2>Example Sentence</h2>\r\n                                <input type='text'\r\n                                placeholder={wordObject.example}\r\n                                onChange={e => updateExample(e)}\r\n                                />\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n};","C:\\Users\\user\\Desktop\\word-associations\\src\\components\\QuizSelect.js",["115"],"import React, { useEffect, useState } from 'react';\r\nimport { useHistory, useParams } from 'react-router-dom';\r\nimport { toast } from 'react-toastify'; \r\nimport axios from 'axios';\r\nimport APIEndpoints from '../api';\r\nimport selection from '../svg/selection.svg';\r\nimport Sidebar from './Sidebar';\r\nimport '../styles/QuizSelect.scss';\r\n\r\ntoast.configure();\r\n\r\nexport default function QuizSelect (props) {\r\n    const [vocabSetsArray, setVocabSetsArray] = useState([]);\r\n    const [activeUser, setActiveUser] = useState('');\r\n    const history = useHistory();\r\n    const { profile } = useParams();    \r\n\r\n    useEffect(() => {\r\n        async function getUserData () {\r\n            try {\r\n                const allUsers = await axios.get(APIEndpoints.userDataEndpoint, {withCredentials: true});\r\n                getActiveUser(allUsers);\r\n            } catch (error) {\r\n                console.error(error);\r\n            }\r\n        }\r\n        getUserData();\r\n    },[]);\r\n\r\n    const getActiveUser = (allUsers) => {\r\n        const foundActiveUser = allUsers.data.find(element => element.data.username === props.user);\r\n        let vocabSetsArray = Object.keys(foundActiveUser.data.vocab)\r\n        setActiveUser(foundActiveUser)\r\n        // This creates the vocabSetsArray state which is then used to display the possible sets\r\n        // to choose a quiz from.\r\n        setVocabSetsArray(vocabSetsArray)\r\n    };\r\n\r\n    // Checks if set has more than four words, if yes, then redirects user to that quiz.\r\n    const redirectToSetQuiz = (e) => {\r\n        let set = e.target.dataset.index;\r\n        let setData = activeUser.data.vocab[set]\r\n        if(setData.length >= 4) {\r\n            history.push(`/${profile}/vocab/${set}/quiz`)\r\n        } else {\r\n            toast.warning('Minimum of four vocabulary items needed to launch quiz', { autoClose: 3500 })\r\n        }\r\n    }\r\n\r\n    return(\r\n        <div className='quiz-select-page-container'>\r\n            <Sidebar className='sidebar'/>\r\n            <div className='quiz-select-container'>\r\n                <div className='possible-sets-container'>\r\n                    <h1>Choose Your Set</h1>\r\n                    <div className='sets'>\r\n                    {vocabSetsArray.map((set) => (\r\n                        <div className='individual-set-box'\r\n                        data-index={set}\r\n                        onClick={e => redirectToSetQuiz(e)}>{set}</div>\r\n                    ))}\r\n                    </div>\r\n                </div>\r\n                <img src={selection} alt='person selecting an option'></img>\r\n            </div>\r\n        </div>\r\n    )\r\n}","C:\\Users\\user\\Desktop\\word-associations\\src\\api.js",[],"C:\\Users\\user\\Desktop\\word-associations\\src\\components\\Sidebar.js",[],"C:\\Users\\user\\Desktop\\word-associations\\src\\components\\Buddies.js",["116","117"],"import React, { useEffect, useState, useRef } from 'react';\r\nimport Sidebar from './Sidebar';\r\nimport BuddiesDisplay from './BuddiesDisplay';\r\nimport axios from 'axios';\r\nimport APIEndpoints from '../api';\r\nimport '../styles/Buddies.scss';\r\n\r\nexport default function Buddies (props) {\r\n    const [nativeLanguageToSearch, setNativeLanguageToSearch] = useState('');\r\n    const [nativeSpeakers, setNativeSpeakers] = useState('');\r\n    const [allUsers, setAllUsers] = useState('');\r\n    const [nativeSpeakersAvailable, setNativeSpeakersAvailable] = useState(false)\r\n    const firstTimeRender = useRef(true)\r\n\r\n    \r\n    useEffect(() => {\r\n        async function getUserData () {\r\n            try {\r\n                const allUsers = await axios.get(APIEndpoints.userDataEndpoint, {withCredentials: true});\r\n                setAllUsers(allUsers.data)\r\n                firstTimeRender.current = false; \r\n            } catch (error) {\r\n                console.error(error);\r\n            }\r\n        }\r\n        getUserData();\r\n    },[])   \r\n  \r\n    useEffect(() => {\r\n        if(firstTimeRender.current === false) {\r\n        displayNativeSpeakers()\r\n        }\r\n    }, [nativeLanguageToSearch])\r\n\r\n    const displayNativeSpeakers = () => {\r\n        let filteredToNativeSpeakers = allUsers.filter(user => user.data.nativeLanguage == nativeLanguageToSearch)\r\n        setNativeSpeakers(filteredToNativeSpeakers);\r\n    }\r\n\r\n    useEffect(() => {\r\n        if(firstTimeRender.current === false) {\r\n        setNativeSpeakersAvailable(true)\r\n        }\r\n    }, [nativeSpeakers])\r\n\r\n    return(\r\n        <div className='buddies-page-container'>\r\n            <Sidebar></Sidebar>\r\n            <div className='buddies-main-container'>\r\n                <h1>Search for native speakers of your target language. Say hi and start a conversation!</h1>\r\n                <h3>What language are you looking for?</h3>\r\n                    <div className=\"form-group\">\r\n                            <select onChange={e => setNativeLanguageToSearch([e.currentTarget.value])}\r\n                            value={nativeLanguageToSearch} \r\n                            id=\"nativeLanguageToSearch\" \r\n                            name=\"nativeLanguageToSearch\">\r\n                                <option value=\"English\">English</option>\r\n                                <option value=\"Russian\">Russian</option>\r\n                                <option value=\"Portuguese\">Portuguese</option>\r\n                                <option value=\"Spanish\">Spanish</option>\r\n                            </select>\r\n                    </div>\r\n                    <div>\r\n                        {nativeSpeakersAvailable &&\r\n                        <div>\r\n                        <h1>A stranger is a friend waiting to happen.</h1>\r\n                        <BuddiesDisplay nativeSpeakers={nativeSpeakers}></BuddiesDisplay>\r\n                        </div>\r\n                        }\r\n                    </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}","C:\\Users\\user\\Desktop\\word-associations\\src\\components\\BuddiesDisplay.js",[],"C:\\Users\\user\\Desktop\\word-associations\\src\\components\\QuizComponents\\Quiz.js",["118","119","120","121"],"C:\\Users\\user\\Desktop\\word-associations\\src\\components\\QuizComponents\\QuizAnswerSelect\\QuizAnswerSelect.js",[],"C:\\Users\\user\\Desktop\\word-associations\\src\\components\\QuizComponents\\QuizAnswerSelect\\QuizScoreTally.js",[],"C:\\Users\\user\\Desktop\\word-associations\\src\\components\\QuizComponents\\QuizAnswerSelect\\QuizWord.js",[],"C:\\Users\\user\\Desktop\\word-associations\\src\\components\\QuizComponents\\QuizResults\\QuizResults.js",[],"C:\\Users\\user\\Desktop\\word-associations\\src\\components\\ProfileComponents\\Profile.js",["122","123"],"C:\\Users\\user\\Desktop\\word-associations\\src\\components\\ProfileComponents\\LanguagesBeingStudied.js",[],{"ruleId":"124","replacedBy":"125"},{"ruleId":"126","replacedBy":"127"},{"ruleId":"128","severity":1,"message":"129","line":9,"column":8,"nodeType":"130","messageId":"131","endLine":9,"endColumn":14},{"ruleId":"132","severity":1,"message":"133","line":54,"column":7,"nodeType":"134","endLine":54,"endColumn":9,"suggestions":"135"},{"ruleId":"132","severity":1,"message":"136","line":145,"column":8,"nodeType":"134","endLine":145,"endColumn":20,"suggestions":"137"},{"ruleId":"132","severity":1,"message":"133","line":34,"column":7,"nodeType":"134","endLine":34,"endColumn":9,"suggestions":"138"},{"ruleId":"132","severity":1,"message":"139","line":85,"column":8,"nodeType":"134","endLine":85,"endColumn":20,"suggestions":"140"},{"ruleId":"132","severity":1,"message":"133","line":34,"column":7,"nodeType":"134","endLine":34,"endColumn":9,"suggestions":"141"},{"ruleId":"132","severity":1,"message":"139","line":135,"column":8,"nodeType":"134","endLine":135,"endColumn":20,"suggestions":"142"},{"ruleId":"132","severity":1,"message":"133","line":25,"column":7,"nodeType":"134","endLine":25,"endColumn":9,"suggestions":"143"},{"ruleId":"132","severity":1,"message":"139","line":89,"column":8,"nodeType":"134","endLine":89,"endColumn":20,"suggestions":"144"},{"ruleId":"132","severity":1,"message":"133","line":28,"column":7,"nodeType":"134","endLine":28,"endColumn":9,"suggestions":"145"},{"ruleId":"132","severity":1,"message":"146","line":33,"column":8,"nodeType":"134","endLine":33,"endColumn":32,"suggestions":"147"},{"ruleId":"148","severity":1,"message":"149","line":36,"column":89,"nodeType":"150","messageId":"151","endLine":36,"endColumn":91},{"ruleId":"132","severity":1,"message":"133","line":36,"column":7,"nodeType":"134","endLine":36,"endColumn":9,"suggestions":"152"},{"ruleId":"132","severity":1,"message":"153","line":52,"column":7,"nodeType":"134","endLine":52,"endColumn":19,"suggestions":"154"},{"ruleId":"132","severity":1,"message":"155","line":131,"column":8,"nodeType":"134","endLine":131,"endColumn":21,"suggestions":"156"},{"ruleId":"132","severity":1,"message":"157","line":141,"column":7,"nodeType":"134","endLine":141,"endColumn":25,"suggestions":"158"},{"ruleId":"132","severity":1,"message":"133","line":38,"column":7,"nodeType":"134","endLine":38,"endColumn":9,"suggestions":"159"},{"ruleId":"132","severity":1,"message":"139","line":102,"column":8,"nodeType":"134","endLine":102,"endColumn":20,"suggestions":"160"},"no-native-reassign",["161"],"no-negated-in-lhs",["162"],"no-unused-vars","'Search' is defined but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'getActiveUser'. Either include it or remove the dependency array.","ArrayExpression",["163"],"React Hook useEffect has a missing dependency: 'uniqueId'. Either include it or remove the dependency array.",["164"],["165"],"React Hook useEffect has missing dependencies: 'props' and 'uniqueId'. Either include them or remove the dependency array. However, 'props' will change when *any* prop changes, so the preferred fix is to destructure the 'props' object outside of the useEffect call and refer to those specific props inside useEffect.",["166"],["167"],["168"],["169"],["170"],["171"],"React Hook useEffect has a missing dependency: 'displayNativeSpeakers'. Either include it or remove the dependency array.",["172"],"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected",["173"],"React Hook useEffect has a missing dependency: 'generateRandomAnswers'. Either include it or remove the dependency array.",["174"],"React Hook useEffect has missing dependencies: 'activeUser.data.vocab', 'randomWordNumber', and 'set'. Either include them or remove the dependency array.",["175"],"React Hook useEffect has missing dependencies: 'activeUser.data.vocab', 'generateRandomAnswers', and 'set'. Either include them or remove the dependency array. You can also replace multiple useState variables with useReducer if 'setExplanation' needs the current value of 'activeUser.data.vocab'.",["176"],["177"],["178"],"no-global-assign","no-unsafe-negation",{"desc":"179","fix":"180"},{"desc":"181","fix":"182"},{"desc":"179","fix":"183"},{"desc":"184","fix":"185"},{"desc":"179","fix":"186"},{"desc":"184","fix":"187"},{"desc":"179","fix":"188"},{"desc":"184","fix":"189"},{"desc":"179","fix":"190"},{"desc":"191","fix":"192"},{"desc":"179","fix":"193"},{"desc":"194","fix":"195"},{"desc":"196","fix":"197"},{"desc":"198","fix":"199"},{"desc":"179","fix":"200"},{"desc":"184","fix":"201"},"Update the dependencies array to be: [getActiveUser]",{"range":"202","text":"203"},"Update the dependencies array to be: [activeUser, uniqueId]",{"range":"204","text":"205"},{"range":"206","text":"203"},"Update the dependencies array to be: [activeUser, props, uniqueId]",{"range":"207","text":"208"},{"range":"209","text":"203"},{"range":"210","text":"208"},{"range":"211","text":"203"},{"range":"212","text":"208"},{"range":"213","text":"203"},"Update the dependencies array to be: [displayNativeSpeakers, nativeLanguageToSearch]",{"range":"214","text":"215"},{"range":"216","text":"203"},"Update the dependencies array to be: [activeUser, generateRandomAnswers]",{"range":"217","text":"218"},"Update the dependencies array to be: [activeUser.data.vocab, randomWordNumber, set, wordsPassed]",{"range":"219","text":"220"},"Update the dependencies array to be: [activeUser.data.vocab, generateRandomAnswers, randomWordNumber, set]",{"range":"221","text":"222"},{"range":"223","text":"203"},{"range":"224","text":"208"},[2091,2093],"[getActiveUser]",[5496,5508],"[activeUser, uniqueId]",[1291,1293],[3072,3084],"[activeUser, props, uniqueId]",[1265,1267],[5470,5482],[918,920],[3495,3507],[961,963],[1158,1182],"[displayNativeSpeakers, nativeLanguageToSearch]",[1508,1510],[2091,2103],"[activeUser, generateRandomAnswers]",[5605,5618],"[activeUser.data.vocab, randomWordNumber, set, wordsPassed]",[6099,6117],"[activeUser.data.vocab, generateRandomAnswers, randomWordNumber, set]",[1599,1601],[4481,4493]]