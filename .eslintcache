[{"C:\\Users\\user\\Desktop\\word-associations\\src\\index.js":"1","C:\\Users\\user\\Desktop\\word-associations\\src\\reportWebVitals.js":"2","C:\\Users\\user\\Desktop\\word-associations\\src\\components\\Routes.js":"3","C:\\Users\\user\\Desktop\\word-associations\\src\\components\\Header.js":"4","C:\\Users\\user\\Desktop\\word-associations\\src\\components\\Footer.js":"5","C:\\Users\\user\\Desktop\\word-associations\\src\\components\\Registration.js":"6","C:\\Users\\user\\Desktop\\word-associations\\src\\components\\Login.js":"7","C:\\Users\\user\\Desktop\\word-associations\\src\\components\\Landing.js":"8","C:\\Users\\user\\Desktop\\word-associations\\src\\components\\Search.js":"9","C:\\Users\\user\\Desktop\\word-associations\\src\\components\\Profile.js":"10","C:\\Users\\user\\Desktop\\word-associations\\src\\components\\Vocab.js":"11","C:\\Users\\user\\Desktop\\word-associations\\src\\components\\Set.js":"12","C:\\Users\\user\\Desktop\\word-associations\\src\\components\\VocabInfo.js":"13","C:\\Users\\user\\Desktop\\word-associations\\src\\components\\QuizSelect.js":"14","C:\\Users\\user\\Desktop\\word-associations\\src\\components\\Quiz.js":"15","C:\\Users\\user\\Desktop\\word-associations\\src\\api.js":"16","C:\\Users\\user\\Desktop\\word-associations\\src\\components\\Sidebar.js":"17","C:\\Users\\user\\Desktop\\word-associations\\src\\components\\QuizResults.js":"18","C:\\Users\\user\\Desktop\\word-associations\\src\\components\\QuizAnswerSelect.js":"19"},{"size":347,"mtime":1613718437469,"results":"20","hashOfConfig":"21"},{"size":375,"mtime":1613718437470,"results":"22","hashOfConfig":"21"},{"size":4251,"mtime":1614088783395,"results":"23","hashOfConfig":"21"},{"size":964,"mtime":1614082280132,"results":"24","hashOfConfig":"21"},{"size":764,"mtime":1613718437458,"results":"25","hashOfConfig":"21"},{"size":6880,"mtime":1614089047148,"results":"26","hashOfConfig":"21"},{"size":2629,"mtime":1614082860046,"results":"27","hashOfConfig":"21"},{"size":911,"mtime":1613718437460,"results":"28","hashOfConfig":"21"},{"size":8155,"mtime":1613740408932,"results":"29","hashOfConfig":"21"},{"size":7085,"mtime":1614088634327,"results":"30","hashOfConfig":"21"},{"size":5048,"mtime":1613718437467,"results":"31","hashOfConfig":"21"},{"size":7893,"mtime":1614162862205,"results":"32","hashOfConfig":"21"},{"size":5689,"mtime":1613996025819,"results":"33","hashOfConfig":"21"},{"size":2611,"mtime":1614088941732,"results":"34","hashOfConfig":"21"},{"size":5850,"mtime":1614166744046,"results":"35","hashOfConfig":"21"},{"size":514,"mtime":1613718437456,"results":"36","hashOfConfig":"21"},{"size":505,"mtime":1613737334770,"results":"37","hashOfConfig":"21"},{"size":368,"mtime":1614166756450,"results":"38","hashOfConfig":"21"},{"size":856,"mtime":1614165276695,"results":"39","hashOfConfig":"21"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},"178xhwb",{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"47","usedDeprecatedRules":"42"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"60","usedDeprecatedRules":"42"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"63","usedDeprecatedRules":"42"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"66","usedDeprecatedRules":"42"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"69","messages":"70","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"71","usedDeprecatedRules":"42"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"74","usedDeprecatedRules":"42"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"77","messages":"78","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"83","messages":"84","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\user\\Desktop\\word-associations\\src\\index.js",[],["85","86"],"C:\\Users\\user\\Desktop\\word-associations\\src\\reportWebVitals.js",[],"C:\\Users\\user\\Desktop\\word-associations\\src\\components\\Routes.js",["87"],"import React, { useState } from 'react';\r\nimport { Route, Switch } from 'react-router-dom';\r\nimport axios from 'axios';\r\nimport Header from './Header';\r\nimport Footer from './Footer';\r\nimport Registration from './Registration';\r\nimport Login from './Login';\r\nimport Landing from './Landing';\r\nimport Search from './Search';\r\nimport Profile from './Profile';\r\nimport Vocab from './Vocab';\r\nimport Set from './Set';\r\nimport VocabInfo from './VocabInfo';\r\nimport QuizSelect from './QuizSelect';\r\nimport Quiz from './Quiz';\r\nimport APIEndpoints from '../api';\r\nimport '../html.scss'\r\n\r\nexport default function Routes() {\r\n    const [signedIn, setSignedIn] = useState(JSON.parse(localStorage.getItem('signedIn')) || false);\r\n    const [user, setUser] = useState(JSON.parse(localStorage.getItem('user')) || '');\r\n    const [language, setLanguage] = useState('en')\r\n\r\n    // Called from Login.js when user successfully signs in. Passes signedIn state to Header.js\r\n    // and passes user state to many components which is then used to retrieve the currently\r\n    // signed in user. These are also saved to localStorage but can probably remove them in the future.\r\n    const updateSignedIn  = (username) => {\r\n        if (signedIn === false) {\r\n          setSignedIn(true, localStorage.setItem('signedIn', JSON.stringify(true)));\r\n          setUser(username, localStorage.setItem('user', JSON.stringify(username)));\r\n        } else {\r\n          localStorage.clear();\r\n          axios.post(APIEndpoints.logoutEndpoint, { withCredentials: true });\r\n        }\r\n    };\r\n    \r\n    // This is sent as props to any component which updates the activeUser state. Updates the \r\n    // data on the backend.\r\n    async function updateUser (uniqueId, activeUser) {\r\n      try {\r\n          const updatedUser = await axios.put(`https://app.yawe.dev/api/1/ce/non-auth-endpoint?key=b0188b53ea77419ba1d6dcda06e4bea9&uniqueId=${uniqueId}`, \r\n          activeUser.data,\r\n          { withCredentials: true },\r\n          { headers: {'Content-Type': 'application/json'}}\r\n          )\r\n          console.log(updatedUser)\r\n      } catch (error) {\r\n          console.log(error)\r\n      }\r\n    }\r\n\r\n    return (\r\n      <div className=\"App\">\r\n          <Header\r\n          signedIn={signedIn}\r\n          user={user}\r\n          updateSignedIn={updateSignedIn}\r\n          ></Header>\r\n          <Switch>\r\n            <Route exact path='/' render={props => <Landing {...props}\r\n                  signedIn={signedIn}\r\n                  language={language}\r\n                  setLanguage={setLanguage}\r\n              />}></Route>\r\n            <Route exact path='/login' render={props => <Login {...props}\r\n                  updateSignedIn={updateSignedIn}\r\n              />}></Route>\r\n            <Route exact path='/registration' component={Registration}></Route>\r\n            <Route exact path='/:profile' render={props => <Profile {...props}\r\n                  user={user}\r\n                  updateUser={updateUser}\r\n              />}></Route>\r\n            {/* <Route path='/:profile/search' render={props => <Search {...props}\r\n                  language={language}\r\n                  setLanguage={setLanguage}\r\n                  updateUser={updateUser}\r\n                  user={user}\r\n            />}></Route> */}\r\n            <Route exact path='/:profile/vocab' render={props => <Vocab {...props}\r\n                user={user}\r\n                updateUser={updateUser}\r\n            />}></Route>\r\n            <Route exact path='/:profile/vocab/:set' render={props => <Set {...props}\r\n                user={user}\r\n                updateUser={updateUser}\r\n            />}></Route>\r\n            <Route exact path='/:profile/quizselect' render={props => <QuizSelect {...props}\r\n                user={user}\r\n            />}></Route>\r\n            <Route exact path='/:profile/vocab/:set/quiz' render={props => <Quiz {...props}\r\n                user={user}\r\n                updateUser={updateUser}\r\n            />}></Route>\r\n            <Route exact path='/:profile/vocab/:set/:vocabItem' render={props => <VocabInfo {...props}\r\n                user={user}\r\n                updateUser={updateUser}\r\n            />}></Route>\r\n          </Switch>\r\n        <Footer></Footer>\r\n      </div>\r\n    );\r\n};\r\n","C:\\Users\\user\\Desktop\\word-associations\\src\\components\\Header.js",[],"C:\\Users\\user\\Desktop\\word-associations\\src\\components\\Footer.js",[],"C:\\Users\\user\\Desktop\\word-associations\\src\\components\\Registration.js",[],"C:\\Users\\user\\Desktop\\word-associations\\src\\components\\Login.js",[],"C:\\Users\\user\\Desktop\\word-associations\\src\\components\\Landing.js",[],"C:\\Users\\user\\Desktop\\word-associations\\src\\components\\Search.js",["88","89"],"import React, { useRef, useState, useEffect } from 'react';\r\nimport APIEndpoints from '../api';\r\nimport { BiMessageSquareAdd } from 'react-icons/bi';\r\nimport axios from 'axios';\r\nimport Sidebar from './Sidebar.js';\r\nimport unitedKingdom from '../svg/unitedKingdom.svg';\r\nimport russia from '../svg/russia.svg';\r\nimport portugal from '../svg/portugal.svg';\r\nimport italy from '../svg/italy.svg';\r\nimport france from '../svg/france.svg';\r\nimport germany from '../svg/germany.svg';\r\nimport spain from '../svg/spain.svg';\r\nimport '../styles/Search.scss';\r\n\r\nexport default function Search(props) {\r\n    const [searchWord, setSearchWord] = useState('');\r\n    const [associationArray, setAssociationArray] = useState([]);\r\n    const [activeUser, setActiveUser] = useState('');\r\n    const [uniqueId, setUniqueId] = useState('');\r\n    const inputRef = useRef();\r\n    const searchButton = useRef();\r\n    \r\n    // Rename this\r\n    let searchHeader;\r\n    if (props.language === 'en') {\r\n        searchHeader = 'Search in English';\r\n    } else if (props.language === 'ru') {\r\n        searchHeader = 'Search in Russian';\r\n    } else if (props.language === 'pt') {\r\n        searchHeader = 'Search in Portuguese'\r\n    } else if (props.language === 'de') {\r\n        searchHeader = 'Search in German';\r\n    } else if (props.language === 'fr') {\r\n        searchHeader = 'Search in French';\r\n    } else if (props.language === 'it') {\r\n        searchHeader = 'Search in Italian';\r\n    } else if (props.language === 'es') {\r\n        searchHeader = 'Search in Spanish';\r\n    }\r\n\r\n    // These two functions are repeated from the profile page. Could be refactored I'm sure.\r\n    useEffect(() => {\r\n        async function getUserData () {\r\n            try {\r\n                const allUsers = await axios.get(APIEndpoints.userDataEndpoint, {withCredentials: true});\r\n                getActiveUser(allUsers);\r\n                console.log('ALL USERS')\r\n                console.log(allUsers)\r\n            } catch (error) {\r\n                console.error(error);\r\n            }\r\n        }\r\n        getUserData();\r\n    },[]);\r\n\r\n    const getActiveUser = (allUsers) => {\r\n        const currentActiveUser = allUsers.data.find(element => element.data.username === props.user);\r\n        setActiveUser(currentActiveUser);\r\n        setUniqueId(currentActiveUser.uniqueId);\r\n    };\r\n\r\n    const createNewSearchFromResult = (e) =>  {\r\n        setSearchWord(e);\r\n        inputRef.current.value = e;\r\n        searchButton.current.focus();\r\n    };\r\n\r\n    class association {\r\n        constructor(meaning, partOfSpeech, weight){\r\n            this.meaning = meaning\r\n            this.partOfSpeech = partOfSpeech;\r\n            this.weight = weight;\r\n        }\r\n    };\r\n    \r\n    async function _getAssociations () {\r\n        try {\r\n            let data = await fetch(`https://api.wordassociations.net/associations/v1.0/json/search?apikey=5b4acb51-a76e-4d05-9349-8044794dea94&text=${searchWord}&lang=${props.language}&limit=10`, \r\n            {mode: 'no-cors'},\r\n            {'Access-Control-Allow-Origin': '*'})\r\n            let words = await data.json()\r\n            console.log(words)\r\n            return words\r\n        } catch {\r\n            console.log('Error')\r\n        }\r\n    };\r\n\r\n    const _makeAssociationData = (data, i) => {\r\n        let defaultAssociation = new association();\r\n        defaultAssociation.meaning = data.response[0].items[i].item\r\n        defaultAssociation.partOfSpeech = data.response[0].items[i].pos\r\n        defaultAssociation.weight = data.response[0].items[i].weight\r\n        return defaultAssociation\r\n    }\r\n    \r\n    async function setAssociations () {\r\n        let words = await _getAssociations()\r\n        if(words.response[0].items.length !== 0) {\r\n            let placeholderArray = []\r\n            for(let i=0; i < 10; i++) {\r\n                let association =_makeAssociationData(words, i)\r\n                placeholderArray.push(association)\r\n            }\r\n            setAssociationArray(placeholderArray)\r\n        } else {\r\n            alert('Try new word')\r\n        }  \r\n    };\r\n\r\n    const addWordToActiveUserVocab = (newAssociatedWord) => {\r\n        let updatedVocab\r\n        if(activeUser.data.vocab.miscellaneous){\r\n            updatedVocab = [...activeUser.data.vocab.miscellaneous, newAssociatedWord]\r\n        } else {\r\n            updatedVocab = [newAssociatedWord]\r\n        }\r\n        setActiveUser((prevState) => {\r\n            const newState = Object.assign({}, prevState);\r\n            newState.data.vocab.miscellaneous = updatedVocab;\r\n            return newState;\r\n        });\r\n        console.log(activeUser.data.vocab.miscellaneous)\r\n    };\r\n\r\n    useEffect(() => {\r\n        if(uniqueId){\r\n            async function updateUserAssociatedWords() {\r\n                console.log('Associated Words')\r\n                console.log(activeUser)\r\n                try {\r\n                    const updatedUser = await axios.put(`https://app.yawe.dev/api/1/ce/non-auth-endpoint?key=b0188b53ea77419ba1d6dcda06e4bea9&uniqueId=${uniqueId}`, \r\n                    activeUser.data,\r\n                    { withCredentials: true },\r\n                    { headers: {'Content-Type': 'application/json'}}\r\n                    )\r\n                    console.log('UPDATED USER')\r\n                    console.log(updatedUser.data)\r\n                } catch (error) {\r\n                    console.log(error)\r\n                }\r\n            }\r\n            updateUserAssociatedWords();\r\n        };\r\n    }, [activeUser])\r\n\r\n    return (\r\n        <div className='search-page-container'>\r\n            <Sidebar className='sidebar'></Sidebar>\r\n            <div className='search-and-results-container'>\r\n                <div className='language-flags-container'>\r\n                    <img className='language-flags' src={unitedKingdom} alt='united-kingdom' onClick={e => props.setLanguage('en')}/>\r\n                    <img className='language-flags' src={russia} alt='russia' onClick={e => props.setLanguage('ru')}/>\r\n                    <img className='language-flags' src={portugal} alt='portugal' onClick={e => props.setLanguage('pt')}/>\r\n                    <img className='language-flags' src={italy} alt='italy' onClick={e => props.setLanguage('it')}/>\r\n                    <img className='language-flags' src={germany} alt='germany' onClick={e => props.setLanguage('de')}/>\r\n                    <img className='language-flags' src={spain} alt='spain' onClick={e => props.setLanguage('es')}/>\r\n                    <img className='language-flags' src={france} alt='france' onClick={e => props.setLanguage('fr')}/>\r\n                    \r\n                </div>\r\n                <div className='search-container'>\r\n                    <h2>{searchHeader}</h2>\r\n                    <div className='search-input-and-button'>\r\n                        <input ref={inputRef} type='text' className='search-input-text' \r\n                        onChange={e => setSearchWord(e.target.value)}>\r\n                        </input>\r\n                        <button ref={searchButton} className='find-synonyms-button' \r\n                        onClick={setAssociations}>Find Associations\r\n                        </button>\r\n                    </div>\r\n                </div>\r\n                <div className='association-container'>\r\n                {associationArray.map((word) => {\r\n                    return<div data-index={word.meaning} className='association-box' onClick={e => createNewSearchFromResult(e.target.dataset.index)}>\r\n                        <p data-index={word.meaning}>{word.meaning}</p>\r\n                        <BiMessageSquareAdd\r\n                            className='add-word-icon'\r\n                            data-index={word.meaning}\r\n                            onClick={e => addWordToActiveUserVocab(e.target.dataset.index)}\r\n                        />\r\n                        <p data-index={word.meaning}>{word.partOfSpeech}</p>\r\n                        <p data-index={word.meaning}>{word.weight}</p>\r\n                        \r\n                    </div>\r\n                })}\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n","C:\\Users\\user\\Desktop\\word-associations\\src\\components\\Profile.js",["90","91"],"import React, { useEffect, useState } from 'react';\r\nimport { formatDistance} from 'date-fns';\r\nimport { useParams } from 'react-router-dom';\r\nimport { FaTrashAlt } from 'react-icons/fa';\r\nimport parseISO from 'date-fns/parseISO';\r\nimport axios from 'axios';\r\nimport unitedKingdom from '../svg/unitedKingdom.svg';\r\nimport russia from '../svg/russia.svg';\r\nimport portugal from '../svg/portugal.svg';\r\nimport italy from '../svg/italy.svg';\r\nimport france from '../svg/france.svg';\r\nimport germany from '../svg/germany.svg';\r\nimport spain from '../svg/spain.svg';\r\nimport APIEndpoints from '../api';\r\nimport Sidebar from './Sidebar';\r\nimport '../styles/Profile.scss';\r\n\r\nexport default function Profile (props) {\r\n    const [activeUser, setActiveUser] = useState('');\r\n    const [uniqueId, setUniqueId] = useState('');\r\n    const [nativeLanguageFlag, setNativeLanguageFlag] = useState();\r\n    const [newLearningLanguage, setNewLearningLanguage] = useState('English');\r\n    const [userCreatedDate, setUserCreatedDate] = useState();\r\n    const { profile } = useParams();\r\n\r\n    // Runs on component mount. This fetches all the users and then \r\n    // runs getActiveUser() to find the signed in user.\r\n    useEffect(() => {\r\n        async function getUserData () {\r\n            try {\r\n                const allUsers = await axios.get(APIEndpoints.userDataEndpoint, {withCredentials: true});\r\n                getActiveUser(allUsers);\r\n            } catch (error) {\r\n                console.error(error);\r\n            }\r\n        }\r\n        getUserData();\r\n    },[]);\r\n\r\n    // Displays a country's flag depending on the user's native language\r\n    const displayFlag = (userData) => {\r\n        if(userData.nativeLanguage === 'Portuguese') {\r\n            setNativeLanguageFlag(portugal)\r\n        } else if (userData.nativeLanguage === 'French') {\r\n            setNativeLanguageFlag(france)\r\n        } else if (userData.nativeLanguage === 'Italian') {\r\n            setNativeLanguageFlag(italy) \r\n        } else if (userData.nativeLanguage === 'German') {\r\n            setNativeLanguageFlag(germany)\r\n        } else if (userData.nativeLanguage === 'Russian') {\r\n            setNativeLanguageFlag(russia)\r\n        } else if (userData.nativeLanguage === 'Spanish') {\r\n            setNativeLanguageFlag(spain)\r\n        } else if (userData.nativeLanguage === 'English') {\r\n            setNativeLanguageFlag(unitedKingdom)\r\n        }\r\n    };\r\n\r\n    // Called from useEffect() axios call on component mount. Sets all activeUser details\r\n    const getActiveUser = (allUsers) => {\r\n        const foundActiveUser = allUsers.data.find(element => element.data.username === profile);\r\n        let dateCreated = foundActiveUser.createdAt.slice(0,10);\r\n        setUserCreatedDate(dateCreated);\r\n        displayFlag(foundActiveUser.data);\r\n        setActiveUser(foundActiveUser);\r\n        setUniqueId(foundActiveUser.uniqueId);\r\n        console.log(foundActiveUser)\r\n    }\r\n\r\n    // Allows user to add another language that they are learning\r\n    const addLanguage = () => {\r\n        if(activeUser.data.nativeLanguage === newLearningLanguage){\r\n            alert('You know this already')\r\n        } else if(!activeUser.data.learningLanguage.includes(newLearningLanguage)){\r\n            let updatedLanguages = [...activeUser.data.learningLanguage, newLearningLanguage]\r\n            setActiveUser((prevState) => {\r\n                const newState = Object.assign({}, prevState);\r\n                newState.data.learningLanguage = updatedLanguages;\r\n                return newState;\r\n            });\r\n        } else {\r\n            alert('Already Learning')\r\n        }\r\n    };\r\n\r\n    // Allows user to delete a language that they had selected to be learning\r\n    const deleteLanguage = (languageToDelete) => {\r\n        let updatedLanguages = activeUser.data.learningLanguage.filter(element => element !== languageToDelete)\r\n        if(window.confirm('Really Delete Language?')){\r\n            setActiveUser((prevState) => {\r\n                const newState = Object.assign({}, prevState);\r\n                newState.data.learningLanguage = updatedLanguages;\r\n                return newState;\r\n            });\r\n        };\r\n    }\r\n\r\n    // This runs anytime the activeUser state is updated, and sends the new data to\r\n    // the backend in a PUT request. Initial function is in Routes.js file.\r\n    useEffect(() => {\r\n        props.updateUser(uniqueId, activeUser);\r\n    }, [activeUser])\r\n\r\n    if(!activeUser) {\r\n        return(\r\n            <div className='profile-container'>\r\n                <Sidebar className='sidebar'></Sidebar>\r\n                <div className='profile-data-container'>\r\n                    <div className=\"lds-ellipsis\"><div></div><div></div><div></div><div></div></div>\r\n                </div>\r\n            </div>\r\n        )\r\n    } else {\r\n        return(\r\n            <div className='profile-container'>\r\n                <Sidebar className='sidebar'></Sidebar>\r\n                <div className='profile-data-container'>\r\n                    <div className='username-and-flag-container'>\r\n                        <h1 className='profile-name'>{activeUser.data.username}</h1>\r\n                        <img className='native-language-flag' src={nativeLanguageFlag} alt='flag-showing-native-language'></img>\r\n                        <p className='member-for'> Member for {formatDistance(parseISO(userCreatedDate), new Date())}</p>\r\n                    </div>\r\n                    <div className='learning-languages-container'>\r\n                        <h1>Languages Being Studied</h1>\r\n                        {activeUser.data.learningLanguage.map((language) => (\r\n                            <div className='learning-languages-individual'>\r\n                            <h2>{language}</h2>\r\n                            <FaTrashAlt className='learning-languages-individual-button'\r\n                            onClick={e => deleteLanguage(language)}\r\n                            >Delete</FaTrashAlt>\r\n                            </div>\r\n                        ))}\r\n                    </div>\r\n                    <div className='another-language-div'>\r\n                        <h3>Another Language?</h3>\r\n                        <div className='another-language-select'>\r\n                            <select onChange={e => setNewLearningLanguage(e.currentTarget.value)} \r\n                            id=\"learningLanguage\" \r\n                            name=\"learningLanguage\"\r\n                            placeholder=\"Another Language?\">\r\n                                <option value=\"English\">English</option>\r\n                                <option value=\"Russian\">Russian</option>\r\n                                <option value=\"Portuguese\">Portuguese</option>\r\n                                <option value=\"Spanish\">Spanish</option>\r\n                            </select>\r\n                            <button onClick={addLanguage} className='uibutton'>Add</button>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n};\r\n\r\n","C:\\Users\\user\\Desktop\\word-associations\\src\\components\\Vocab.js",["92","93"],"import React, { useEffect, useState } from 'react';\r\nimport { useHistory } from 'react-router-dom';\r\nimport { useParams } from 'react-router-dom';\r\nimport { FiTrash} from 'react-icons/fi';\r\nimport { BiPlusCircle } from 'react-icons/bi';\r\nimport { toast } from 'react-toastify'; \r\nimport axios from 'axios';\r\nimport uniqid from 'uniqid';\r\nimport APIEndpoints from '../api';\r\nimport Sidebar from '../components/Sidebar';\r\nimport 'react-toastify/dist/ReactToastify.css';\r\nimport '../styles/Vocab.scss';\r\n\r\ntoast.configure();\r\n\r\nexport default function Vocab (props) {\r\n    const [activeUser, setActiveUser] = useState('');\r\n    const [uniqueId, setUniqueId] = useState('');\r\n    const [vocabSetsArray, setVocabSetsArray] = useState([]);\r\n    const [newSetName, setNewSetName] = useState('');\r\n    const history = useHistory();\r\n    const { profile } = useParams();\r\n    \r\n    // These two functions are repeated from the profile page. Could be refactored I'm sure.\r\n    useEffect(() => {\r\n        async function getUserData () {\r\n            try {\r\n                const allUsers = await axios.get(APIEndpoints.userDataEndpoint, {withCredentials: true});\r\n                getActiveUser(allUsers);\r\n            } catch (error) {\r\n                console.error(error);\r\n            }\r\n        }\r\n        getUserData();\r\n    },[]);\r\n\r\n    const getActiveUser = (allUsers) => {\r\n        const currentActiveUser = allUsers.data.find(element => element.data.username === props.user);\r\n        setUniqueId(currentActiveUser.uniqueId);\r\n        setActiveUser(currentActiveUser);\r\n        let vocabSetsArray = Object.keys(currentActiveUser.data.vocab)\r\n        setVocabSetsArray(vocabSetsArray)\r\n    };\r\n\r\n    const redirectToSet = (e) => {\r\n        let vocabSetURL = e.target.dataset.index;\r\n        history.push(`/${profile}/vocab/${vocabSetURL}`);\r\n    }\r\n\r\n    const deleteSet = (event) => {\r\n        event.stopPropagation();\r\n        let vocabSetName = event.target.dataset.index\r\n        let updatedVocabSets = vocabSetsArray.filter(element => element !== vocabSetName);\r\n        if(window.confirm('Really Delete Set?')){\r\n            delete activeUser.data.vocab[vocabSetName]\r\n            setActiveUser((prevState) => {\r\n                const newState = Object.assign({}, prevState);\r\n                return newState;\r\n            });\r\n            setVocabSetsArray(updatedVocabSets)\r\n            toast.info(`${vocabSetName} deleted`, { autoClose: 1000 })\r\n        } else {\r\n            return;\r\n        }\r\n    };\r\n\r\n    const addSet = () => {\r\n        if(newSetName === ''){\r\n            return;\r\n        } else {\r\n            setActiveUser((prevState) => {\r\n                const newState = Object.assign({}, prevState);\r\n                newState.data.vocab[newSetName] = [];\r\n                return newState;\r\n            });\r\n            setVocabSetsArray(vocabSetsArray.concat(newSetName))\r\n            setNewSetName('');\r\n        }\r\n    };\r\n\r\n    useEffect(() => {\r\n        if(uniqueId){\r\n            props.updateUser(uniqueId, activeUser);\r\n        }\r\n    }, [activeUser])\r\n\r\n    if(!activeUser) {\r\n        return(\r\n            <div className='sets-page-container'>\r\n                <Sidebar className='sidebar'></Sidebar>\r\n                <div className='sets-main-container'>\r\n                    <div className=\"lds-ellipsis\"><div></div><div></div><div></div><div></div></div>\r\n                </div>\r\n            </div>\r\n        )\r\n    } else {\r\n        return(\r\n            <div className='sets-page-container'>\r\n                <Sidebar className='sidebar'></Sidebar>\r\n                <div className='sets-main-container'>\r\n                    <h1 className='sets-main-title'>Your Sets</h1>\r\n                    <div className='sets-add-container'>\r\n                        <h2 className='sets-add'>Add Set</h2>\r\n                        <input type='text' \r\n                            value={newSetName} \r\n                            className= 'new-set-input-box'\r\n                            onChange={e => setNewSetName(e.target.value)}/>\r\n                        <BiPlusCircle className='bi-plus-circle' onClick={addSet}/>\r\n                    </div>\r\n                    <div className='sets-box-container'>\r\n                        {vocabSetsArray.map((set) => (\r\n                            <div\r\n                            data-index={set}\r\n                            key={uniqid}\r\n                            className='set-box'\r\n                            onClick={e => redirectToSet(e)}>\r\n                                <h1 data-index={set}\r\n                                >{set}</h1>\r\n                                    <div className='delete-set'>\r\n                                    <FiTrash data-index={set}  \r\n                                    onClick={e => deleteSet(e)}\r\n                                    />\r\n                                    </div>\r\n                            </div>\r\n                        ))}\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}","C:\\Users\\user\\Desktop\\word-associations\\src\\components\\Set.js",["94","95"],"C:\\Users\\user\\Desktop\\word-associations\\src\\components\\VocabInfo.js",["96","97"],"import React, { useState, useEffect } from 'react';\r\nimport { useParams } from 'react-router-dom';\r\nimport axios from 'axios';\r\nimport APIEndpoints from '../api';\r\nimport Sidebar from './Sidebar';\r\nimport '../styles/VocabInfo.scss';\r\n\r\nexport default function VocabInfo (props) {\r\n    const [activeUser, setActiveUser] = useState('');\r\n    const [uniqueId, setUniqueId] = useState('');\r\n    const [wordObject, setWordObject] = useState('');\r\n    const [definitionNumber, setDefinitionNumber] = useState(0);\r\n    const { set, vocabItem } = useParams(); \r\n    \r\n    useEffect(() => {\r\n        async function getUserData () {\r\n            try {\r\n                const allUsers = await axios.get(APIEndpoints.userDataEndpoint, {withCredentials: true});\r\n                getActiveUser(allUsers);\r\n            } catch (error) {\r\n                console.error(error);\r\n            }\r\n        }\r\n        getUserData();\r\n    },[]);\r\n\r\n    const getActiveUser = (allUsers) => {\r\n        const currentActiveUser = allUsers.data.find(element => element.data.username === props.user);\r\n        setActiveUser(currentActiveUser);\r\n        setUniqueId(currentActiveUser.uniqueId);\r\n        let currentWord = currentActiveUser.data.vocab[set].find(({word}) => word === vocabItem)\r\n        setWordObject(currentWord);\r\n    };\r\n\r\n    const updateExplanation = (e) => {\r\n        console.log(e.target.value)\r\n        let currentWord = activeUser.data.vocab[set].find(({word}) => word === vocabItem)\r\n        setActiveUser((prevState) => {\r\n            const newState = Object.assign({}, prevState);\r\n            currentWord.explanation = e.target.value;\r\n            return newState;\r\n        });\r\n    };\r\n\r\n    const updateExample = (e) => {\r\n        console.log(e.target.value)\r\n        let currentWord = activeUser.data.vocab[set].find(({word}) => word === vocabItem)\r\n        setActiveUser((prevState) => {\r\n            const newState = Object.assign({}, prevState);\r\n            currentWord.example = e.target.value;\r\n            return newState;\r\n        });\r\n    }\r\n\r\n    const displayNextDefinition = (e) => {\r\n        let newDefinitionNumber;\r\n        switch(e.target.dataset.index){\r\n        case 'next': \r\n            newDefinitionNumber = definitionNumber +1\r\n            if (newDefinitionNumber === wordObject.definitions.length) {newDefinitionNumber = 0}\r\n            setDefinitionNumber(newDefinitionNumber)\r\n            break;\r\n        case 'previous':\r\n            newDefinitionNumber = definitionNumber -1\r\n            if (newDefinitionNumber === -1) {newDefinitionNumber = wordObject.definitions.length-1}\r\n            setDefinitionNumber(newDefinitionNumber)\r\n            break;\r\n        default: \r\n            break;\r\n        }\r\n    }\r\n\r\n    const removeCurrentDefinition = (e) => {\r\n        if(window.confirm('Delete')) {\r\n            let updatedDefinitions1 = wordObject.definitions.slice(0, definitionNumber)\r\n            let updatedDefinitions2 = wordObject.definitions.slice(definitionNumber+1)\r\n            let newDefinitions = [...updatedDefinitions1, ...updatedDefinitions2]\r\n            let currentWord = activeUser.data.vocab[set].find(({word}) => word === vocabItem)\r\n            setActiveUser((prevState) => {\r\n                const newState = Object.assign({}, prevState);\r\n                currentWord.definitions = newDefinitions\r\n                return newState;\r\n            });\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        props.updateUser(uniqueId, activeUser);\r\n    }, [activeUser])\r\n    \r\n    if(!wordObject) {\r\n        return(\r\n            <div className='vocab-item-page-container'>\r\n                <Sidebar className='sidebar'></Sidebar>\r\n                <div className='vocab-item-main-container'>\r\n                    <div className=\"lds-ellipsis\"><div></div><div></div><div></div><div></div></div>\r\n                </div>\r\n            </div>\r\n        )\r\n    } else {\r\n        return(\r\n            <div className='vocab-item-page-container'>\r\n                <Sidebar className='sidebar'></Sidebar>\r\n                <div className='vocab-item-main-container'>\r\n                    <div className='vocab-item-user-data'>\r\n                        <h1 className='vocab-item-word'>Word: {vocabItem}</h1>\r\n                        <h1 className='vocab-item-definition'>Your Explanation: </h1>\r\n                        <input className='vocab-item-definition-input' type='text' \r\n                        placeholder={wordObject.explanation}\r\n                        onChange={e => updateExplanation(e)}\r\n                        />\r\n                    </div>\r\n                    \r\n                    <div className='vocab-item-api-data'>\r\n                        <h3>Pronunciation</h3>\r\n                            <h3>{wordObject.pronunciation}</h3>\r\n                        <h3>Definition</h3>\r\n                        <button data-index='previous' onClick={e => displayNextDefinition(e)}>Previous</button>\r\n                        <button data-index='next' onClick={e => displayNextDefinition(e)}>Next</button>\r\n                        \r\n                            <h3>{wordObject.definitions[definitionNumber]}</h3>\r\n                        <button data-index={vocabItem} onClick={removeCurrentDefinition}>Delete</button>\r\n                    </div>\r\n                    <div className='vocab-item-example'>\r\n                        <h2>Example Sentence</h2>\r\n                            <input type='text'\r\n                            placeholder={wordObject.example}\r\n                            onChange={e => updateExample(e)}\r\n                            />\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n};","C:\\Users\\user\\Desktop\\word-associations\\src\\components\\QuizSelect.js",["98"],"import React, { useEffect, useState } from 'react';\r\nimport { useHistory, useParams } from 'react-router-dom';\r\nimport { toast } from 'react-toastify'; \r\nimport axios from 'axios';\r\nimport APIEndpoints from '../api';\r\nimport selection from '../svg/selection.svg';\r\nimport Sidebar from './Sidebar';\r\nimport '../styles/QuizSelect.scss';\r\n\r\ntoast.configure();\r\n\r\nexport default function QuizSelect (props) {\r\n    const [vocabSetsArray, setVocabSetsArray] = useState([]);\r\n    const [activeUser, setActiveUser] = useState('');\r\n    const history = useHistory();\r\n    const { profile } = useParams();    \r\n\r\n    useEffect(() => {\r\n        async function getUserData () {\r\n            try {\r\n                const allUsers = await axios.get(APIEndpoints.userDataEndpoint, {withCredentials: true});\r\n                getActiveUser(allUsers);\r\n            } catch (error) {\r\n                console.error(error);\r\n            }\r\n        }\r\n        getUserData();\r\n    },[]);\r\n\r\n    const getActiveUser = (allUsers) => {\r\n        const foundActiveUser = allUsers.data.find(element => element.data.username === props.user);\r\n        let vocabSetsArray = Object.keys(foundActiveUser.data.vocab)\r\n        setActiveUser(foundActiveUser)\r\n        // This creates the vocabSetsArray state which is then used to display the possible sets\r\n        // to choose a quiz from.\r\n        setVocabSetsArray(vocabSetsArray)\r\n    };\r\n\r\n    // Checks if set has more than four words, if yes, then redirects user to that quiz.\r\n    const redirectToSetQuiz = (e) => {\r\n        let set = e.target.dataset.index;\r\n        let setData = activeUser.data.vocab[set]\r\n        if(setData.length >= 4) {\r\n            history.push(`/${profile}/vocab/${set}/quiz`)\r\n        } else {\r\n            toast.warning('Minimum of four vocabulary items needed to launch quiz', { autoClose: 3500 })\r\n        }\r\n    }\r\n\r\n    return(\r\n        <div className='quiz-select-page-container'>\r\n            <Sidebar className='sidebar'/>\r\n            <div className='quiz-select-container'>\r\n                <div className='possible-sets-container'>\r\n                    <h1>Choose Your Set</h1>\r\n                    <div className='sets'>\r\n                    {vocabSetsArray.map((set) => (\r\n                        <div className='individual-set-box'\r\n                        data-index={set}\r\n                        onClick={e => redirectToSetQuiz(e)}>{set}</div>\r\n                    ))}\r\n                    </div>\r\n                </div>\r\n                <img src={selection} alt='person selecting an option'></img>\r\n            </div>\r\n        </div>\r\n    )\r\n}","C:\\Users\\user\\Desktop\\word-associations\\src\\components\\Quiz.js",["99","100","101","102","103"],"C:\\Users\\user\\Desktop\\word-associations\\src\\api.js",[],"C:\\Users\\user\\Desktop\\word-associations\\src\\components\\Sidebar.js",[],"C:\\Users\\user\\Desktop\\word-associations\\src\\components\\QuizResults.js",[],"C:\\Users\\user\\Desktop\\word-associations\\src\\components\\QuizAnswerSelect.js",[],{"ruleId":"104","replacedBy":"105"},{"ruleId":"106","replacedBy":"107"},{"ruleId":"108","severity":1,"message":"109","line":9,"column":8,"nodeType":"110","messageId":"111","endLine":9,"endColumn":14},{"ruleId":"112","severity":1,"message":"113","line":54,"column":7,"nodeType":"114","endLine":54,"endColumn":9,"suggestions":"115"},{"ruleId":"112","severity":1,"message":"116","line":145,"column":8,"nodeType":"114","endLine":145,"endColumn":20,"suggestions":"117"},{"ruleId":"112","severity":1,"message":"113","line":38,"column":7,"nodeType":"114","endLine":38,"endColumn":9,"suggestions":"118"},{"ruleId":"112","severity":1,"message":"119","line":102,"column":8,"nodeType":"114","endLine":102,"endColumn":20,"suggestions":"120"},{"ruleId":"112","severity":1,"message":"113","line":35,"column":7,"nodeType":"114","endLine":35,"endColumn":9,"suggestions":"121"},{"ruleId":"112","severity":1,"message":"119","line":85,"column":8,"nodeType":"114","endLine":85,"endColumn":20,"suggestions":"122"},{"ruleId":"112","severity":1,"message":"113","line":35,"column":7,"nodeType":"114","endLine":35,"endColumn":9,"suggestions":"123"},{"ruleId":"112","severity":1,"message":"119","line":134,"column":8,"nodeType":"114","endLine":134,"endColumn":20,"suggestions":"124"},{"ruleId":"112","severity":1,"message":"113","line":25,"column":7,"nodeType":"114","endLine":25,"endColumn":9,"suggestions":"125"},{"ruleId":"112","severity":1,"message":"119","line":89,"column":8,"nodeType":"114","endLine":89,"endColumn":20,"suggestions":"126"},{"ruleId":"112","severity":1,"message":"113","line":28,"column":7,"nodeType":"114","endLine":28,"endColumn":9,"suggestions":"127"},{"ruleId":"108","severity":1,"message":"128","line":21,"column":13,"nodeType":"110","messageId":"111","endLine":21,"endColumn":20},{"ruleId":"112","severity":1,"message":"113","line":33,"column":7,"nodeType":"114","endLine":33,"endColumn":9,"suggestions":"129"},{"ruleId":"112","severity":1,"message":"130","line":46,"column":7,"nodeType":"114","endLine":46,"endColumn":19,"suggestions":"131"},{"ruleId":"112","severity":1,"message":"132","line":81,"column":8,"nodeType":"114","endLine":81,"endColumn":21,"suggestions":"133"},{"ruleId":"112","severity":1,"message":"134","line":88,"column":7,"nodeType":"114","endLine":88,"endColumn":15,"suggestions":"135"},"no-native-reassign",["136"],"no-negated-in-lhs",["137"],"no-unused-vars","'Search' is defined but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'getActiveUser'. Either include it or remove the dependency array.","ArrayExpression",["138"],"React Hook useEffect has a missing dependency: 'uniqueId'. Either include it or remove the dependency array.",["139"],["140"],"React Hook useEffect has missing dependencies: 'props' and 'uniqueId'. Either include them or remove the dependency array. However, 'props' will change when *any* prop changes, so the preferred fix is to destructure the 'props' object outside of the useEffect call and refer to those specific props inside useEffect.",["141"],["142"],["143"],["144"],["145"],["146"],["147"],["148"],"'profile' is assigned a value but never used.",["149"],"React Hook useEffect has a missing dependency: 'generateRandomAnswers'. Either include it or remove the dependency array.",["150"],"React Hook useEffect has missing dependencies: 'activeUser.data.vocab', 'number', and 'set'. Either include them or remove the dependency array.",["151"],"React Hook useEffect has missing dependencies: 'activeUser.data.vocab', 'generateRandomAnswers', and 'set'. Either include them or remove the dependency array. You can also replace multiple useState variables with useReducer if 'setWord' needs the current value of 'activeUser.data.vocab'.",["152"],"no-global-assign","no-unsafe-negation",{"desc":"153","fix":"154"},{"desc":"155","fix":"156"},{"desc":"153","fix":"157"},{"desc":"158","fix":"159"},{"desc":"153","fix":"160"},{"desc":"158","fix":"161"},{"desc":"153","fix":"162"},{"desc":"158","fix":"163"},{"desc":"153","fix":"164"},{"desc":"158","fix":"165"},{"desc":"153","fix":"166"},{"desc":"153","fix":"167"},{"desc":"168","fix":"169"},{"desc":"170","fix":"171"},{"desc":"172","fix":"173"},"Update the dependencies array to be: [getActiveUser]",{"range":"174","text":"175"},"Update the dependencies array to be: [activeUser, uniqueId]",{"range":"176","text":"177"},{"range":"178","text":"175"},"Update the dependencies array to be: [activeUser, props, uniqueId]",{"range":"179","text":"180"},{"range":"181","text":"175"},{"range":"182","text":"180"},{"range":"183","text":"175"},{"range":"184","text":"180"},{"range":"185","text":"175"},{"range":"186","text":"180"},{"range":"187","text":"175"},{"range":"188","text":"175"},"Update the dependencies array to be: [activeUser, generateRandomAnswers]",{"range":"189","text":"190"},"Update the dependencies array to be: [activeUser.data.vocab, number, set, wordsPassed]",{"range":"191","text":"192"},"Update the dependencies array to be: [activeUser.data.vocab, generateRandomAnswers, number, set]",{"range":"193","text":"194"},[2091,2093],"[getActiveUser]",[5496,5508],"[activeUser, uniqueId]",[1555,1557],[4437,4449],"[activeUser, props, uniqueId]",[1321,1323],[3062,3074],[1295,1297],[5391,5403],[918,920],[3495,3507],[961,963],[1291,1293],[1720,1732],"[activeUser, generateRandomAnswers]",[3204,3217],"[activeUser.data.vocab, number, set, wordsPassed]",[3403,3411],"[activeUser.data.vocab, generateRandomAnswers, number, set]"]