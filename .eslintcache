[{"C:\\Users\\user\\Desktop\\word-associations\\src\\index.js":"1","C:\\Users\\user\\Desktop\\word-associations\\src\\reportWebVitals.js":"2","C:\\Users\\user\\Desktop\\word-associations\\src\\components\\Routes.js":"3","C:\\Users\\user\\Desktop\\word-associations\\src\\components\\Header.js":"4","C:\\Users\\user\\Desktop\\word-associations\\src\\components\\Footer.js":"5","C:\\Users\\user\\Desktop\\word-associations\\src\\components\\Registration.js":"6","C:\\Users\\user\\Desktop\\word-associations\\src\\components\\Login.js":"7","C:\\Users\\user\\Desktop\\word-associations\\src\\components\\Landing.js":"8","C:\\Users\\user\\Desktop\\word-associations\\src\\components\\Search.js":"9","C:\\Users\\user\\Desktop\\word-associations\\src\\components\\Profile.js":"10","C:\\Users\\user\\Desktop\\word-associations\\src\\components\\Vocab.js":"11","C:\\Users\\user\\Desktop\\word-associations\\src\\components\\Set.js":"12","C:\\Users\\user\\Desktop\\word-associations\\src\\components\\VocabInfo.js":"13","C:\\Users\\user\\Desktop\\word-associations\\src\\components\\QuizSelect.js":"14","C:\\Users\\user\\Desktop\\word-associations\\src\\components\\Quiz.js":"15","C:\\Users\\user\\Desktop\\word-associations\\src\\api.js":"16","C:\\Users\\user\\Desktop\\word-associations\\src\\components\\Sidebar.js":"17","C:\\Users\\user\\Desktop\\word-associations\\src\\components\\QuizResults.js":"18","C:\\Users\\user\\Desktop\\word-associations\\src\\components\\QuizAnswerSelect.js":"19","C:\\Users\\user\\Desktop\\word-associations\\src\\components\\Buddies.js":"20","C:\\Users\\user\\Desktop\\word-associations\\src\\components\\BuddiesDisplay.js":"21"},{"size":347,"mtime":1613718437469,"results":"22","hashOfConfig":"23"},{"size":375,"mtime":1613718437470,"results":"24","hashOfConfig":"23"},{"size":4482,"mtime":1615015522136,"results":"25","hashOfConfig":"23"},{"size":1075,"mtime":1615015223790,"results":"26","hashOfConfig":"23"},{"size":764,"mtime":1613718437458,"results":"27","hashOfConfig":"23"},{"size":6880,"mtime":1614089047148,"results":"28","hashOfConfig":"23"},{"size":2629,"mtime":1614082860046,"results":"29","hashOfConfig":"23"},{"size":911,"mtime":1613718437460,"results":"30","hashOfConfig":"23"},{"size":8155,"mtime":1613740408932,"results":"31","hashOfConfig":"23"},{"size":7342,"mtime":1615016604434,"results":"32","hashOfConfig":"23"},{"size":5252,"mtime":1615016539849,"results":"33","hashOfConfig":"23"},{"size":8099,"mtime":1615017875081,"results":"34","hashOfConfig":"23"},{"size":5882,"mtime":1615016896726,"results":"35","hashOfConfig":"23"},{"size":2611,"mtime":1614088941732,"results":"36","hashOfConfig":"23"},{"size":7853,"mtime":1615019655127,"results":"37","hashOfConfig":"23"},{"size":514,"mtime":1613718437456,"results":"38","hashOfConfig":"23"},{"size":566,"mtime":1614420168432,"results":"39","hashOfConfig":"23"},{"size":1550,"mtime":1615036031087,"results":"40","hashOfConfig":"23"},{"size":882,"mtime":1614412278880,"results":"41","hashOfConfig":"23"},{"size":2995,"mtime":1614426927272,"results":"42","hashOfConfig":"23"},{"size":423,"mtime":1614694770169,"results":"43","hashOfConfig":"23"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},"178xhwb",{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"63","usedDeprecatedRules":"46"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"66","messages":"67","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"68","messages":"69","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"70","messages":"71","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"72","messages":"73","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"74","usedDeprecatedRules":"46"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"77","messages":"78","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"83","messages":"84","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"87","usedDeprecatedRules":"46"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},"C:\\Users\\user\\Desktop\\word-associations\\src\\index.js",[],["90","91"],"C:\\Users\\user\\Desktop\\word-associations\\src\\reportWebVitals.js",[],"C:\\Users\\user\\Desktop\\word-associations\\src\\components\\Routes.js",["92"],"C:\\Users\\user\\Desktop\\word-associations\\src\\components\\Header.js",[],"C:\\Users\\user\\Desktop\\word-associations\\src\\components\\Footer.js",[],"C:\\Users\\user\\Desktop\\word-associations\\src\\components\\Registration.js",[],"C:\\Users\\user\\Desktop\\word-associations\\src\\components\\Login.js",[],"C:\\Users\\user\\Desktop\\word-associations\\src\\components\\Landing.js",[],"C:\\Users\\user\\Desktop\\word-associations\\src\\components\\Search.js",["93","94"],"import React, { useRef, useState, useEffect } from 'react';\r\nimport APIEndpoints from '../api';\r\nimport { BiMessageSquareAdd } from 'react-icons/bi';\r\nimport axios from 'axios';\r\nimport Sidebar from './Sidebar.js';\r\nimport unitedKingdom from '../svg/unitedKingdom.svg';\r\nimport russia from '../svg/russia.svg';\r\nimport portugal from '../svg/portugal.svg';\r\nimport italy from '../svg/italy.svg';\r\nimport france from '../svg/france.svg';\r\nimport germany from '../svg/germany.svg';\r\nimport spain from '../svg/spain.svg';\r\nimport '../styles/Search.scss';\r\n\r\nexport default function Search(props) {\r\n    const [searchWord, setSearchWord] = useState('');\r\n    const [associationArray, setAssociationArray] = useState([]);\r\n    const [activeUser, setActiveUser] = useState('');\r\n    const [uniqueId, setUniqueId] = useState('');\r\n    const inputRef = useRef();\r\n    const searchButton = useRef();\r\n    \r\n    // Rename this\r\n    let searchHeader;\r\n    if (props.language === 'en') {\r\n        searchHeader = 'Search in English';\r\n    } else if (props.language === 'ru') {\r\n        searchHeader = 'Search in Russian';\r\n    } else if (props.language === 'pt') {\r\n        searchHeader = 'Search in Portuguese'\r\n    } else if (props.language === 'de') {\r\n        searchHeader = 'Search in German';\r\n    } else if (props.language === 'fr') {\r\n        searchHeader = 'Search in French';\r\n    } else if (props.language === 'it') {\r\n        searchHeader = 'Search in Italian';\r\n    } else if (props.language === 'es') {\r\n        searchHeader = 'Search in Spanish';\r\n    }\r\n\r\n    // These two functions are repeated from the profile page. Could be refactored I'm sure.\r\n    useEffect(() => {\r\n        async function getUserData () {\r\n            try {\r\n                const allUsers = await axios.get(APIEndpoints.userDataEndpoint, {withCredentials: true});\r\n                getActiveUser(allUsers);\r\n                console.log('ALL USERS')\r\n                console.log(allUsers)\r\n            } catch (error) {\r\n                console.error(error);\r\n            }\r\n        }\r\n        getUserData();\r\n    },[]);\r\n\r\n    const getActiveUser = (allUsers) => {\r\n        const currentActiveUser = allUsers.data.find(element => element.data.username === props.user);\r\n        setActiveUser(currentActiveUser);\r\n        setUniqueId(currentActiveUser.uniqueId);\r\n    };\r\n\r\n    const createNewSearchFromResult = (e) =>  {\r\n        setSearchWord(e);\r\n        inputRef.current.value = e;\r\n        searchButton.current.focus();\r\n    };\r\n\r\n    class association {\r\n        constructor(meaning, partOfSpeech, weight){\r\n            this.meaning = meaning\r\n            this.partOfSpeech = partOfSpeech;\r\n            this.weight = weight;\r\n        }\r\n    };\r\n    \r\n    async function _getAssociations () {\r\n        try {\r\n            let data = await fetch(`https://api.wordassociations.net/associations/v1.0/json/search?apikey=5b4acb51-a76e-4d05-9349-8044794dea94&text=${searchWord}&lang=${props.language}&limit=10`, \r\n            {mode: 'no-cors'},\r\n            {'Access-Control-Allow-Origin': '*'})\r\n            let words = await data.json()\r\n            console.log(words)\r\n            return words\r\n        } catch {\r\n            console.log('Error')\r\n        }\r\n    };\r\n\r\n    const _makeAssociationData = (data, i) => {\r\n        let defaultAssociation = new association();\r\n        defaultAssociation.meaning = data.response[0].items[i].item\r\n        defaultAssociation.partOfSpeech = data.response[0].items[i].pos\r\n        defaultAssociation.weight = data.response[0].items[i].weight\r\n        return defaultAssociation\r\n    }\r\n    \r\n    async function setAssociations () {\r\n        let words = await _getAssociations()\r\n        if(words.response[0].items.length !== 0) {\r\n            let placeholderArray = []\r\n            for(let i=0; i < 10; i++) {\r\n                let association =_makeAssociationData(words, i)\r\n                placeholderArray.push(association)\r\n            }\r\n            setAssociationArray(placeholderArray)\r\n        } else {\r\n            alert('Try new word')\r\n        }  \r\n    };\r\n\r\n    const addWordToActiveUserVocab = (newAssociatedWord) => {\r\n        let updatedVocab\r\n        if(activeUser.data.vocab.miscellaneous){\r\n            updatedVocab = [...activeUser.data.vocab.miscellaneous, newAssociatedWord]\r\n        } else {\r\n            updatedVocab = [newAssociatedWord]\r\n        }\r\n        setActiveUser((prevState) => {\r\n            const newState = Object.assign({}, prevState);\r\n            newState.data.vocab.miscellaneous = updatedVocab;\r\n            return newState;\r\n        });\r\n        console.log(activeUser.data.vocab.miscellaneous)\r\n    };\r\n\r\n    useEffect(() => {\r\n        if(uniqueId){\r\n            async function updateUserAssociatedWords() {\r\n                console.log('Associated Words')\r\n                console.log(activeUser)\r\n                try {\r\n                    const updatedUser = await axios.put(`https://app.yawe.dev/api/1/ce/non-auth-endpoint?key=b0188b53ea77419ba1d6dcda06e4bea9&uniqueId=${uniqueId}`, \r\n                    activeUser.data,\r\n                    { withCredentials: true },\r\n                    { headers: {'Content-Type': 'application/json'}}\r\n                    )\r\n                    console.log('UPDATED USER')\r\n                    console.log(updatedUser.data)\r\n                } catch (error) {\r\n                    console.log(error)\r\n                }\r\n            }\r\n            updateUserAssociatedWords();\r\n        };\r\n    }, [activeUser])\r\n\r\n    return (\r\n        <div className='search-page-container'>\r\n            <Sidebar className='sidebar'></Sidebar>\r\n            <div className='search-and-results-container'>\r\n                <div className='language-flags-container'>\r\n                    <img className='language-flags' src={unitedKingdom} alt='united-kingdom' onClick={e => props.setLanguage('en')}/>\r\n                    <img className='language-flags' src={russia} alt='russia' onClick={e => props.setLanguage('ru')}/>\r\n                    <img className='language-flags' src={portugal} alt='portugal' onClick={e => props.setLanguage('pt')}/>\r\n                    <img className='language-flags' src={italy} alt='italy' onClick={e => props.setLanguage('it')}/>\r\n                    <img className='language-flags' src={germany} alt='germany' onClick={e => props.setLanguage('de')}/>\r\n                    <img className='language-flags' src={spain} alt='spain' onClick={e => props.setLanguage('es')}/>\r\n                    <img className='language-flags' src={france} alt='france' onClick={e => props.setLanguage('fr')}/>\r\n                    \r\n                </div>\r\n                <div className='search-container'>\r\n                    <h2>{searchHeader}</h2>\r\n                    <div className='search-input-and-button'>\r\n                        <input ref={inputRef} type='text' className='search-input-text' \r\n                        onChange={e => setSearchWord(e.target.value)}>\r\n                        </input>\r\n                        <button ref={searchButton} className='find-synonyms-button' \r\n                        onClick={setAssociations}>Find Associations\r\n                        </button>\r\n                    </div>\r\n                </div>\r\n                <div className='association-container'>\r\n                {associationArray.map((word) => {\r\n                    return<div data-index={word.meaning} className='association-box' onClick={e => createNewSearchFromResult(e.target.dataset.index)}>\r\n                        <p data-index={word.meaning}>{word.meaning}</p>\r\n                        <BiMessageSquareAdd\r\n                            className='add-word-icon'\r\n                            data-index={word.meaning}\r\n                            onClick={e => addWordToActiveUserVocab(e.target.dataset.index)}\r\n                        />\r\n                        <p data-index={word.meaning}>{word.partOfSpeech}</p>\r\n                        <p data-index={word.meaning}>{word.weight}</p>\r\n                        \r\n                    </div>\r\n                })}\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n","C:\\Users\\user\\Desktop\\word-associations\\src\\components\\Profile.js",["95","96"],"C:\\Users\\user\\Desktop\\word-associations\\src\\components\\Vocab.js",["97","98"],"C:\\Users\\user\\Desktop\\word-associations\\src\\components\\Set.js",["99","100"],"C:\\Users\\user\\Desktop\\word-associations\\src\\components\\VocabInfo.js",["101","102"],"C:\\Users\\user\\Desktop\\word-associations\\src\\components\\QuizSelect.js",["103"],"import React, { useEffect, useState } from 'react';\r\nimport { useHistory, useParams } from 'react-router-dom';\r\nimport { toast } from 'react-toastify'; \r\nimport axios from 'axios';\r\nimport APIEndpoints from '../api';\r\nimport selection from '../svg/selection.svg';\r\nimport Sidebar from './Sidebar';\r\nimport '../styles/QuizSelect.scss';\r\n\r\ntoast.configure();\r\n\r\nexport default function QuizSelect (props) {\r\n    const [vocabSetsArray, setVocabSetsArray] = useState([]);\r\n    const [activeUser, setActiveUser] = useState('');\r\n    const history = useHistory();\r\n    const { profile } = useParams();    \r\n\r\n    useEffect(() => {\r\n        async function getUserData () {\r\n            try {\r\n                const allUsers = await axios.get(APIEndpoints.userDataEndpoint, {withCredentials: true});\r\n                getActiveUser(allUsers);\r\n            } catch (error) {\r\n                console.error(error);\r\n            }\r\n        }\r\n        getUserData();\r\n    },[]);\r\n\r\n    const getActiveUser = (allUsers) => {\r\n        const foundActiveUser = allUsers.data.find(element => element.data.username === props.user);\r\n        let vocabSetsArray = Object.keys(foundActiveUser.data.vocab)\r\n        setActiveUser(foundActiveUser)\r\n        // This creates the vocabSetsArray state which is then used to display the possible sets\r\n        // to choose a quiz from.\r\n        setVocabSetsArray(vocabSetsArray)\r\n    };\r\n\r\n    // Checks if set has more than four words, if yes, then redirects user to that quiz.\r\n    const redirectToSetQuiz = (e) => {\r\n        let set = e.target.dataset.index;\r\n        let setData = activeUser.data.vocab[set]\r\n        if(setData.length >= 4) {\r\n            history.push(`/${profile}/vocab/${set}/quiz`)\r\n        } else {\r\n            toast.warning('Minimum of four vocabulary items needed to launch quiz', { autoClose: 3500 })\r\n        }\r\n    }\r\n\r\n    return(\r\n        <div className='quiz-select-page-container'>\r\n            <Sidebar className='sidebar'/>\r\n            <div className='quiz-select-container'>\r\n                <div className='possible-sets-container'>\r\n                    <h1>Choose Your Set</h1>\r\n                    <div className='sets'>\r\n                    {vocabSetsArray.map((set) => (\r\n                        <div className='individual-set-box'\r\n                        data-index={set}\r\n                        onClick={e => redirectToSetQuiz(e)}>{set}</div>\r\n                    ))}\r\n                    </div>\r\n                </div>\r\n                <img src={selection} alt='person selecting an option'></img>\r\n            </div>\r\n        </div>\r\n    )\r\n}","C:\\Users\\user\\Desktop\\word-associations\\src\\components\\Quiz.js",["104","105","106","107"],"C:\\Users\\user\\Desktop\\word-associations\\src\\api.js",[],"C:\\Users\\user\\Desktop\\word-associations\\src\\components\\Sidebar.js",[],"C:\\Users\\user\\Desktop\\word-associations\\src\\components\\QuizResults.js",[],"C:\\Users\\user\\Desktop\\word-associations\\src\\components\\QuizAnswerSelect.js",[],"C:\\Users\\user\\Desktop\\word-associations\\src\\components\\Buddies.js",["108","109"],"import React, { useEffect, useState, useRef } from 'react';\r\nimport Sidebar from './Sidebar';\r\nimport BuddiesDisplay from './BuddiesDisplay';\r\nimport axios from 'axios';\r\nimport APIEndpoints from '../api';\r\nimport '../styles/Buddies.scss';\r\n\r\nexport default function Buddies (props) {\r\n    const [nativeLanguageToSearch, setNativeLanguageToSearch] = useState('');\r\n    const [nativeSpeakers, setNativeSpeakers] = useState('');\r\n    const [allUsers, setAllUsers] = useState('');\r\n    const [nativeSpeakersAvailable, setNativeSpeakersAvailable] = useState(false)\r\n    const firstTimeRender = useRef(true)\r\n\r\n    \r\n    useEffect(() => {\r\n        async function getUserData () {\r\n            try {\r\n                const allUsers = await axios.get(APIEndpoints.userDataEndpoint, {withCredentials: true});\r\n                setAllUsers(allUsers.data)\r\n                firstTimeRender.current = false; \r\n            } catch (error) {\r\n                console.error(error);\r\n            }\r\n        }\r\n        getUserData();\r\n    },[])   \r\n  \r\n    useEffect(() => {\r\n        if(firstTimeRender.current === false) {\r\n        displayNativeSpeakers()\r\n        }\r\n    }, [nativeLanguageToSearch])\r\n\r\n    const displayNativeSpeakers = () => {\r\n        let filteredToNativeSpeakers = allUsers.filter(user => user.data.nativeLanguage == nativeLanguageToSearch)\r\n        setNativeSpeakers(filteredToNativeSpeakers);\r\n    }\r\n\r\n    useEffect(() => {\r\n        if(firstTimeRender.current === false) {\r\n        setNativeSpeakersAvailable(true)\r\n        }\r\n    }, [nativeSpeakers])\r\n\r\n    return(\r\n        <div className='buddies-page-container'>\r\n            <Sidebar></Sidebar>\r\n            <div className='buddies-main-container'>\r\n                <h1>Search for native speakers of your target language. Say hi and start a conversation!</h1>\r\n                <h3>What language are you looking for?</h3>\r\n                    <div className=\"form-group\">\r\n                            <select onChange={e => setNativeLanguageToSearch([e.currentTarget.value])}\r\n                            value={nativeLanguageToSearch} \r\n                            id=\"nativeLanguageToSearch\" \r\n                            name=\"nativeLanguageToSearch\">\r\n                                <option value=\"English\">English</option>\r\n                                <option value=\"Russian\">Russian</option>\r\n                                <option value=\"Portuguese\">Portuguese</option>\r\n                                <option value=\"Spanish\">Spanish</option>\r\n                            </select>\r\n                    </div>\r\n                    <div>\r\n                        {nativeSpeakersAvailable &&\r\n                        <div>\r\n                        <h1>A stranger is a friend waiting to happen.</h1>\r\n                        <BuddiesDisplay nativeSpeakers={nativeSpeakers}></BuddiesDisplay>\r\n                        </div>\r\n                        }\r\n                    </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}","C:\\Users\\user\\Desktop\\word-associations\\src\\components\\BuddiesDisplay.js",[],{"ruleId":"110","replacedBy":"111"},{"ruleId":"112","replacedBy":"113"},{"ruleId":"114","severity":1,"message":"115","line":9,"column":8,"nodeType":"116","messageId":"117","endLine":9,"endColumn":14},{"ruleId":"118","severity":1,"message":"119","line":54,"column":7,"nodeType":"120","endLine":54,"endColumn":9,"suggestions":"121"},{"ruleId":"118","severity":1,"message":"122","line":145,"column":8,"nodeType":"120","endLine":145,"endColumn":20,"suggestions":"123"},{"ruleId":"118","severity":1,"message":"119","line":39,"column":7,"nodeType":"120","endLine":39,"endColumn":9,"suggestions":"124"},{"ruleId":"118","severity":1,"message":"125","line":103,"column":8,"nodeType":"120","endLine":103,"endColumn":20,"suggestions":"126"},{"ruleId":"118","severity":1,"message":"119","line":34,"column":7,"nodeType":"120","endLine":34,"endColumn":9,"suggestions":"127"},{"ruleId":"118","severity":1,"message":"125","line":85,"column":8,"nodeType":"120","endLine":85,"endColumn":20,"suggestions":"128"},{"ruleId":"118","severity":1,"message":"119","line":34,"column":7,"nodeType":"120","endLine":34,"endColumn":9,"suggestions":"129"},{"ruleId":"118","severity":1,"message":"125","line":133,"column":8,"nodeType":"120","endLine":133,"endColumn":20,"suggestions":"130"},{"ruleId":"118","severity":1,"message":"119","line":25,"column":7,"nodeType":"120","endLine":25,"endColumn":9,"suggestions":"131"},{"ruleId":"118","severity":1,"message":"125","line":89,"column":8,"nodeType":"120","endLine":89,"endColumn":20,"suggestions":"132"},{"ruleId":"118","severity":1,"message":"119","line":28,"column":7,"nodeType":"120","endLine":28,"endColumn":9,"suggestions":"133"},{"ruleId":"118","severity":1,"message":"119","line":36,"column":7,"nodeType":"120","endLine":36,"endColumn":9,"suggestions":"134"},{"ruleId":"118","severity":1,"message":"135","line":52,"column":7,"nodeType":"120","endLine":52,"endColumn":19,"suggestions":"136"},{"ruleId":"118","severity":1,"message":"137","line":131,"column":8,"nodeType":"120","endLine":131,"endColumn":21,"suggestions":"138"},{"ruleId":"118","severity":1,"message":"139","line":141,"column":7,"nodeType":"120","endLine":141,"endColumn":25,"suggestions":"140"},{"ruleId":"118","severity":1,"message":"141","line":33,"column":8,"nodeType":"120","endLine":33,"endColumn":32,"suggestions":"142"},{"ruleId":"143","severity":1,"message":"144","line":36,"column":89,"nodeType":"145","messageId":"146","endLine":36,"endColumn":91},"no-native-reassign",["147"],"no-negated-in-lhs",["148"],"no-unused-vars","'Search' is defined but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'getActiveUser'. Either include it or remove the dependency array.","ArrayExpression",["149"],"React Hook useEffect has a missing dependency: 'uniqueId'. Either include it or remove the dependency array.",["150"],["151"],"React Hook useEffect has missing dependencies: 'props' and 'uniqueId'. Either include them or remove the dependency array. However, 'props' will change when *any* prop changes, so the preferred fix is to destructure the 'props' object outside of the useEffect call and refer to those specific props inside useEffect.",["152"],["153"],["154"],["155"],["156"],["157"],["158"],["159"],["160"],"React Hook useEffect has a missing dependency: 'generateRandomAnswers'. Either include it or remove the dependency array.",["161"],"React Hook useEffect has missing dependencies: 'activeUser.data.vocab', 'randomWordNumber', and 'set'. Either include them or remove the dependency array.",["162"],"React Hook useEffect has missing dependencies: 'activeUser.data.vocab', 'generateRandomAnswers', and 'set'. Either include them or remove the dependency array. You can also replace multiple useState variables with useReducer if 'setExplanation' needs the current value of 'activeUser.data.vocab'.",["163"],"React Hook useEffect has a missing dependency: 'displayNativeSpeakers'. Either include it or remove the dependency array.",["164"],"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","no-global-assign","no-unsafe-negation",{"desc":"165","fix":"166"},{"desc":"167","fix":"168"},{"desc":"165","fix":"169"},{"desc":"170","fix":"171"},{"desc":"165","fix":"172"},{"desc":"170","fix":"173"},{"desc":"165","fix":"174"},{"desc":"170","fix":"175"},{"desc":"165","fix":"176"},{"desc":"170","fix":"177"},{"desc":"165","fix":"178"},{"desc":"165","fix":"179"},{"desc":"180","fix":"181"},{"desc":"182","fix":"183"},{"desc":"184","fix":"185"},{"desc":"186","fix":"187"},"Update the dependencies array to be: [getActiveUser]",{"range":"188","text":"189"},"Update the dependencies array to be: [activeUser, uniqueId]",{"range":"190","text":"191"},{"range":"192","text":"189"},"Update the dependencies array to be: [activeUser, props, uniqueId]",{"range":"193","text":"194"},{"range":"195","text":"189"},{"range":"196","text":"194"},{"range":"197","text":"189"},{"range":"198","text":"194"},{"range":"199","text":"189"},{"range":"200","text":"194"},{"range":"201","text":"189"},{"range":"202","text":"189"},"Update the dependencies array to be: [activeUser, generateRandomAnswers]",{"range":"203","text":"204"},"Update the dependencies array to be: [activeUser.data.vocab, randomWordNumber, set, wordsPassed]",{"range":"205","text":"206"},"Update the dependencies array to be: [activeUser.data.vocab, generateRandomAnswers, randomWordNumber, set]",{"range":"207","text":"208"},"Update the dependencies array to be: [displayNativeSpeakers, nativeLanguageToSearch]",{"range":"209","text":"210"},[2091,2093],"[getActiveUser]",[5496,5508],"[activeUser, uniqueId]",[1589,1591],[4471,4483],"[activeUser, props, uniqueId]",[1291,1293],[3072,3084],[1265,1267],[5361,5373],[918,920],[3495,3507],[961,963],[1472,1474],[2055,2067],"[activeUser, generateRandomAnswers]",[5569,5582],"[activeUser.data.vocab, randomWordNumber, set, wordsPassed]",[6063,6081],"[activeUser.data.vocab, generateRandomAnswers, randomWordNumber, set]",[1158,1182],"[displayNativeSpeakers, nativeLanguageToSearch]"]