[{"C:\\Users\\user\\Desktop\\word-associations\\src\\index.js":"1","C:\\Users\\user\\Desktop\\word-associations\\src\\reportWebVitals.js":"2","C:\\Users\\user\\Desktop\\word-associations\\src\\components\\Routes.js":"3","C:\\Users\\user\\Desktop\\word-associations\\src\\components\\Header.js":"4","C:\\Users\\user\\Desktop\\word-associations\\src\\components\\Footer.js":"5","C:\\Users\\user\\Desktop\\word-associations\\src\\components\\Registration.js":"6","C:\\Users\\user\\Desktop\\word-associations\\src\\components\\Login.js":"7","C:\\Users\\user\\Desktop\\word-associations\\src\\components\\Landing.js":"8","C:\\Users\\user\\Desktop\\word-associations\\src\\components\\Search.js":"9","C:\\Users\\user\\Desktop\\word-associations\\src\\components\\Profile.js":"10","C:\\Users\\user\\Desktop\\word-associations\\src\\components\\Vocab.js":"11","C:\\Users\\user\\Desktop\\word-associations\\src\\components\\Set.js":"12","C:\\Users\\user\\Desktop\\word-associations\\src\\components\\VocabInfo.js":"13","C:\\Users\\user\\Desktop\\word-associations\\src\\components\\QuizSelect.js":"14","C:\\Users\\user\\Desktop\\word-associations\\src\\components\\Quiz.js":"15","C:\\Users\\user\\Desktop\\word-associations\\src\\api.js":"16","C:\\Users\\user\\Desktop\\word-associations\\src\\components\\Sidebar.js":"17"},{"size":347,"mtime":1613718437469,"results":"18","hashOfConfig":"19"},{"size":375,"mtime":1613718437470,"results":"20","hashOfConfig":"19"},{"size":3830,"mtime":1613737353072,"results":"21","hashOfConfig":"19"},{"size":866,"mtime":1613738526337,"results":"22","hashOfConfig":"19"},{"size":764,"mtime":1613718437458,"results":"23","hashOfConfig":"19"},{"size":6696,"mtime":1613718437464,"results":"24","hashOfConfig":"19"},{"size":2581,"mtime":1613718437462,"results":"25","hashOfConfig":"19"},{"size":911,"mtime":1613718437460,"results":"26","hashOfConfig":"19"},{"size":8155,"mtime":1613740408932,"results":"27","hashOfConfig":"19"},{"size":6497,"mtime":1613718437462,"results":"28","hashOfConfig":"19"},{"size":5048,"mtime":1613718437467,"results":"29","hashOfConfig":"19"},{"size":6606,"mtime":1613736250909,"results":"30","hashOfConfig":"19"},{"size":3892,"mtime":1613718437467,"results":"31","hashOfConfig":"19"},{"size":2394,"mtime":1613739668502,"results":"32","hashOfConfig":"19"},{"size":4529,"mtime":1613718437463,"results":"33","hashOfConfig":"19"},{"size":514,"mtime":1613718437456,"results":"34","hashOfConfig":"19"},{"size":505,"mtime":1613737334770,"results":"35","hashOfConfig":"19"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},"178xhwb",{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"55","messages":"56","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"57","usedDeprecatedRules":"38"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"60","usedDeprecatedRules":"38"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"63","messages":"64","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"65","usedDeprecatedRules":"38"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"68","messages":"69","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"70","usedDeprecatedRules":"38"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\user\\Desktop\\word-associations\\src\\index.js",[],["75","76"],"C:\\Users\\user\\Desktop\\word-associations\\src\\reportWebVitals.js",[],"C:\\Users\\user\\Desktop\\word-associations\\src\\components\\Routes.js",["77"],"C:\\Users\\user\\Desktop\\word-associations\\src\\components\\Header.js",[],"C:\\Users\\user\\Desktop\\word-associations\\src\\components\\Footer.js",[],"C:\\Users\\user\\Desktop\\word-associations\\src\\components\\Registration.js",[],"C:\\Users\\user\\Desktop\\word-associations\\src\\components\\Login.js",[],"C:\\Users\\user\\Desktop\\word-associations\\src\\components\\Landing.js",[],"C:\\Users\\user\\Desktop\\word-associations\\src\\components\\Search.js",["78","79"],"C:\\Users\\user\\Desktop\\word-associations\\src\\components\\Profile.js",["80","81"],"import React, { useEffect, useState } from 'react';\r\nimport { formatDistance} from 'date-fns';\r\nimport { useParams } from 'react-router-dom';\r\nimport { FaTrashAlt } from 'react-icons/fa';\r\nimport parseISO from 'date-fns/parseISO';\r\nimport axios from 'axios';\r\nimport unitedKingdom from '../svg/unitedKingdom.svg';\r\nimport russia from '../svg/russia.svg';\r\nimport portugal from '../svg/portugal.svg';\r\nimport italy from '../svg/italy.svg';\r\nimport france from '../svg/france.svg';\r\nimport germany from '../svg/germany.svg';\r\nimport spain from '../svg/spain.svg';\r\nimport APIEndpoints from '../api';\r\nimport Sidebar from './Sidebar';\r\nimport '../styles/Profile.scss';\r\n\r\nexport default function Profile (props) {\r\n    const [activeUser, setActiveUser] = useState('');\r\n    const [uniqueId, setUniqueId] = useState('');\r\n    const [nativeLanguageFlag, setNativeLanguageFlag] = useState();\r\n    const [newLearningLanguage, setNewLearningLanguage] = useState('English');\r\n    const [userCreatedDate, setUserCreatedDate] = useState();\r\n    const { profile } = useParams();\r\n\r\n    useEffect(() => {\r\n        async function getUserData () {\r\n            try {\r\n                const allUsers = await axios.get(APIEndpoints.userDataEndpoint, {withCredentials: true});\r\n                getActiveUser(allUsers);\r\n            } catch (error) {\r\n                console.error(error);\r\n            }\r\n        }\r\n        getUserData();\r\n    },[]);\r\n\r\n    const displayFlag = (userData) => {\r\n        if(userData.nativeLanguage === 'Portuguese') {\r\n            setNativeLanguageFlag(portugal)\r\n        } else if (userData.nativeLanguage === 'French') {\r\n            setNativeLanguageFlag(france)\r\n        } else if (userData.nativeLanguage === 'Italian') {\r\n            setNativeLanguageFlag(italy) \r\n        } else if (userData.nativeLanguage === 'German') {\r\n            setNativeLanguageFlag(germany)\r\n        } else if (userData.nativeLanguage === 'Russian') {\r\n            setNativeLanguageFlag(russia)\r\n        } else if (userData.nativeLanguage === 'Spanish') {\r\n            setNativeLanguageFlag(spain)\r\n        } else if (userData.nativeLanguage === 'English') {\r\n            setNativeLanguageFlag(unitedKingdom)\r\n        }\r\n    };\r\n\r\n    const getActiveUser = (allUsers) => {\r\n        const currentActiveUser = allUsers.data.find(element => element.data.username === profile);\r\n        let dateCreated = currentActiveUser.createdAt.slice(0,10);\r\n        setUserCreatedDate(dateCreated);\r\n        displayFlag(currentActiveUser.data);\r\n        setActiveUser(currentActiveUser);\r\n        console.log(currentActiveUser)\r\n        setUniqueId(currentActiveUser.uniqueId);\r\n    }\r\n\r\n    const addLanguage = () => {\r\n        if(activeUser.data.nativeLanguage === newLearningLanguage){\r\n            alert('You know this already')\r\n        } else if(!activeUser.data.learningLanguage.includes(newLearningLanguage)){\r\n            let updatedLanguages = [...activeUser.data.learningLanguage, newLearningLanguage]\r\n            setActiveUser((prevState) => {\r\n                const newState = Object.assign({}, prevState);\r\n                newState.data.learningLanguage = updatedLanguages;\r\n                return newState;\r\n            });\r\n        } else {\r\n            alert('Already Learning')\r\n        }\r\n    };\r\n\r\n    const deleteLanguage = (languageToDelete) => {\r\n        let updatedLanguages = activeUser.data.learningLanguage.filter(element => element !== languageToDelete)\r\n        if(window.confirm('Really Delete Language?')){\r\n            setActiveUser((prevState) => {\r\n                const newState = Object.assign({}, prevState);\r\n                newState.data.learningLanguage = updatedLanguages;\r\n                return newState;\r\n            });\r\n        };\r\n    }\r\n\r\n    useEffect(() => {\r\n        props.updateUser(uniqueId, activeUser);\r\n    }, [activeUser])\r\n\r\n    if(!activeUser) {\r\n        return(\r\n            <div className='profile-container'>\r\n                <Sidebar className='sidebar'></Sidebar>\r\n                <div className='profile-data-container'>\r\n                    <div className=\"lds-ellipsis\"><div></div><div></div><div></div><div></div></div>\r\n                </div>\r\n            </div>\r\n        )\r\n    } else {\r\n        return(\r\n            <div className='profile-container'>\r\n                <Sidebar className='sidebar'></Sidebar>\r\n                <div className='profile-data-container'>\r\n                    <div className='username-and-flag-container'>\r\n                        <h1 className='profile-name'>{activeUser.data.username}</h1>\r\n                        <img className='native-language-flag' src={nativeLanguageFlag} alt='flag-showing-native-language'></img>\r\n                        <p className='member-for'> Member for {formatDistance(parseISO(userCreatedDate), new Date())}</p>\r\n                    </div>\r\n                    <div className='learning-languages-container'>\r\n                        <h1>Languages Being Studied</h1>\r\n                        {activeUser.data.learningLanguage.map((language) => (\r\n                            <div className='learning-languages-individual'>\r\n                            <h2>{language}</h2>\r\n                            <FaTrashAlt className='learning-languages-individual-button'\r\n                            onClick={e => deleteLanguage(language)}\r\n                            >Delete</FaTrashAlt>\r\n                            </div>\r\n                        ))}\r\n                    </div>\r\n                    <div className='another-language-div'>\r\n                        <h3>Another Language?</h3>\r\n                        <div className='another-language-select'>\r\n                            <select onChange={e => setNewLearningLanguage(e.currentTarget.value)} \r\n                            id=\"learningLanguage\" \r\n                            name=\"learningLanguage\"\r\n                            placeholder=\"Another Language?\">\r\n                                <option value=\"English\">English</option>\r\n                                <option value=\"Russian\">Russian</option>\r\n                                <option value=\"Portuguese\">Portuguese</option>\r\n                                <option value=\"Spanish\">Spanish</option>\r\n                            </select>\r\n                            <button onClick={addLanguage} className='uibutton'>Add</button>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n};\r\n\r\n","C:\\Users\\user\\Desktop\\word-associations\\src\\components\\Vocab.js",["82","83"],"import React, { useEffect, useState } from 'react';\r\nimport { useHistory } from 'react-router-dom';\r\nimport { useParams } from 'react-router-dom';\r\nimport { FiTrash} from 'react-icons/fi';\r\nimport { BiPlusCircle } from 'react-icons/bi';\r\nimport { toast } from 'react-toastify'; \r\nimport axios from 'axios';\r\nimport uniqid from 'uniqid';\r\nimport APIEndpoints from '../api';\r\nimport Sidebar from '../components/Sidebar';\r\nimport 'react-toastify/dist/ReactToastify.css';\r\nimport '../styles/Vocab.scss';\r\n\r\ntoast.configure();\r\n\r\nexport default function Vocab (props) {\r\n    const [activeUser, setActiveUser] = useState('');\r\n    const [uniqueId, setUniqueId] = useState('');\r\n    const [vocabSetsArray, setVocabSetsArray] = useState([]);\r\n    const [newSetName, setNewSetName] = useState('');\r\n    const history = useHistory();\r\n    const { profile } = useParams();\r\n    \r\n    // These two functions are repeated from the profile page. Could be refactored I'm sure.\r\n    useEffect(() => {\r\n        async function getUserData () {\r\n            try {\r\n                const allUsers = await axios.get(APIEndpoints.userDataEndpoint, {withCredentials: true});\r\n                getActiveUser(allUsers);\r\n            } catch (error) {\r\n                console.error(error);\r\n            }\r\n        }\r\n        getUserData();\r\n    },[]);\r\n\r\n    const getActiveUser = (allUsers) => {\r\n        const currentActiveUser = allUsers.data.find(element => element.data.username === props.user);\r\n        setUniqueId(currentActiveUser.uniqueId);\r\n        setActiveUser(currentActiveUser);\r\n        let vocabSetsArray = Object.keys(currentActiveUser.data.vocab)\r\n        setVocabSetsArray(vocabSetsArray)\r\n    };\r\n\r\n    const redirectToSet = (e) => {\r\n        let vocabSetURL = e.target.dataset.index;\r\n        history.push(`/${profile}/vocab/${vocabSetURL}`);\r\n    }\r\n\r\n    const deleteSet = (event) => {\r\n        event.stopPropagation();\r\n        let vocabSetName = event.target.dataset.index\r\n        let updatedVocabSets = vocabSetsArray.filter(element => element !== vocabSetName);\r\n        if(window.confirm('Really Delete Set?')){\r\n            delete activeUser.data.vocab[vocabSetName]\r\n            setActiveUser((prevState) => {\r\n                const newState = Object.assign({}, prevState);\r\n                return newState;\r\n            });\r\n            setVocabSetsArray(updatedVocabSets)\r\n            toast.info(`${vocabSetName} deleted`, { autoClose: 1000 })\r\n        } else {\r\n            return;\r\n        }\r\n    };\r\n\r\n    const addSet = () => {\r\n        if(newSetName === ''){\r\n            return;\r\n        } else {\r\n            setActiveUser((prevState) => {\r\n                const newState = Object.assign({}, prevState);\r\n                newState.data.vocab[newSetName] = [];\r\n                return newState;\r\n            });\r\n            setVocabSetsArray(vocabSetsArray.concat(newSetName))\r\n            setNewSetName('');\r\n        }\r\n    };\r\n\r\n    useEffect(() => {\r\n        if(uniqueId){\r\n            props.updateUser(uniqueId, activeUser);\r\n        }\r\n    }, [activeUser])\r\n\r\n    if(!activeUser) {\r\n        return(\r\n            <div className='sets-page-container'>\r\n                <Sidebar className='sidebar'></Sidebar>\r\n                <div className='sets-main-container'>\r\n                    <div className=\"lds-ellipsis\"><div></div><div></div><div></div><div></div></div>\r\n                </div>\r\n            </div>\r\n        )\r\n    } else {\r\n        return(\r\n            <div className='sets-page-container'>\r\n                <Sidebar className='sidebar'></Sidebar>\r\n                <div className='sets-main-container'>\r\n                    <h1 className='sets-main-title'>Your Sets</h1>\r\n                    <div className='sets-add-container'>\r\n                        <h2 className='sets-add'>Add Set</h2>\r\n                        <input type='text' \r\n                            value={newSetName} \r\n                            className= 'new-set-input-box'\r\n                            onChange={e => setNewSetName(e.target.value)}/>\r\n                        <BiPlusCircle className='bi-plus-circle' onClick={addSet}/>\r\n                    </div>\r\n                    <div className='sets-box-container'>\r\n                        {vocabSetsArray.map((set) => (\r\n                            <div\r\n                            data-index={set}\r\n                            key={uniqid}\r\n                            className='set-box'\r\n                            onClick={e => redirectToSet(e)}>\r\n                                <h1 data-index={set}\r\n                                >{set}</h1>\r\n                                    <div className='delete-set'>\r\n                                    <FiTrash data-index={set}  \r\n                                    onClick={e => deleteSet(e)}\r\n                                    />\r\n                                    </div>\r\n                            </div>\r\n                        ))}\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}","C:\\Users\\user\\Desktop\\word-associations\\src\\components\\Set.js",["84","85"],"C:\\Users\\user\\Desktop\\word-associations\\src\\components\\VocabInfo.js",["86","87"],"import React, { useState, useEffect } from 'react';\r\nimport { useParams } from 'react-router-dom';\r\nimport axios from 'axios';\r\nimport APIEndpoints from '../api';\r\nimport Sidebar from './Sidebar';\r\nimport '../styles/VocabInfo.scss';\r\n\r\nexport default function VocabInfo (props) {\r\n    const [activeUser, setActiveUser] = useState('');\r\n    const [uniqueId, setUniqueId] = useState('');\r\n    const [wordObject, setWordObject] = useState('');\r\n    const { set, vocabItem } = useParams(); \r\n\r\n    useEffect(() => {\r\n        async function getUserData () {\r\n            try {\r\n                const allUsers = await axios.get(APIEndpoints.userDataEndpoint, {withCredentials: true});\r\n                getActiveUser(allUsers);\r\n            } catch (error) {\r\n                console.error(error);\r\n            }\r\n        }\r\n        getUserData();\r\n    },[]);\r\n\r\n    const getActiveUser = (allUsers) => {\r\n        const currentActiveUser = allUsers.data.find(element => element.data.username === props.user);\r\n        setActiveUser(currentActiveUser);\r\n        setUniqueId(currentActiveUser.uniqueId);\r\n        let currentWord = currentActiveUser.data.vocab[set].find(({word}) => word === vocabItem)\r\n        setWordObject(currentWord);\r\n    };\r\n\r\n    const updateExplanation = (e) => {\r\n        console.log(e.target.value)\r\n        let currentWord = activeUser.data.vocab[set].find(({word}) => word === vocabItem)\r\n        setActiveUser((prevState) => {\r\n            const newState = Object.assign({}, prevState);\r\n            currentWord.explanation = e.target.value;\r\n            return newState;\r\n        });\r\n    };\r\n\r\n    const updateExample = (e) => {\r\n        console.log(e.target.value)\r\n        let currentWord = activeUser.data.vocab[set].find(({word}) => word === vocabItem)\r\n        setActiveUser((prevState) => {\r\n            const newState = Object.assign({}, prevState);\r\n            currentWord.example = e.target.value;\r\n            return newState;\r\n        });\r\n    }\r\n\r\n    useEffect(() => {\r\n        props.updateUser(uniqueId, activeUser);\r\n    }, [activeUser])\r\n    \r\n    if(!wordObject) {\r\n        return(\r\n            <div className='vocab-item-page-container'>\r\n                <Sidebar className='sidebar'></Sidebar>\r\n                <div className='vocab-item-main-container'>\r\n                    <div className=\"lds-ellipsis\"><div></div><div></div><div></div><div></div></div>\r\n                </div>\r\n            </div>\r\n        )\r\n    } else {\r\n        return(\r\n            <div className='vocab-item-page-container'>\r\n                <Sidebar className='sidebar'></Sidebar>\r\n                <div className='vocab-item-main-container'>\r\n                    <div className='vocab-item-user-data'>\r\n                        <h1 className='vocab-item-word'>Word: {vocabItem}</h1>\r\n                        <h1 className='vocab-item-definition'>Your Explanation: </h1>\r\n                        <input className='vocab-item-definition-input' type='text' \r\n                        placeholder={wordObject.explanation}\r\n                        onChange={e => updateExplanation(e)}\r\n                        />\r\n                    </div>\r\n                    \r\n                    <div className='vocab-item-api-data'>\r\n                        <h3>Pronunciation</h3>\r\n                            <h3>{wordObject.pronunciation}</h3>\r\n                        <h3>Definition</h3>\r\n                            <h3>{wordObject.definitions[1]}</h3>\r\n                    </div>\r\n                    <div className='vocab-item-example'>\r\n                        <h2>Example Sentence</h2>\r\n                            <input type='text'\r\n                            placeholder={wordObject.example}\r\n                            onChange={e => updateExample(e)}\r\n                            />\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n};","C:\\Users\\user\\Desktop\\word-associations\\src\\components\\QuizSelect.js",["88"],"C:\\Users\\user\\Desktop\\word-associations\\src\\components\\Quiz.js",["89","90","91","92"],"import React, { useEffect, useState, useRef } from 'react';\r\nimport { useParams } from 'react-router-dom';\r\nimport uniqid from 'uniqid';\r\nimport axios from 'axios';\r\nimport APIEndpoints from '../api';\r\nimport Sidebar from './Sidebar';\r\nimport '../styles/Quiz.scss';\r\n\r\nexport default function Quiz(props) {\r\n    const [activeUser, setActiveUser] = useState('');\r\n    const [answers, setAnswers] = useState([]);\r\n    const [word, setWord] = useState('');\r\n    const [number, setNumber] = useState(0);\r\n    const firstTimeRender = useRef(true);\r\n    const { profile, set } = useParams();\r\n\r\n    useEffect(() => {\r\n        async function getUserData () {\r\n            try {\r\n                const allUsers = await axios.get(APIEndpoints.userDataEndpoint, {withCredentials: true});\r\n                getActiveUser(allUsers);\r\n            } catch (error) {\r\n                console.error(error);\r\n            }\r\n        }\r\n        getUserData();\r\n    },[]);\r\n\r\n    const getActiveUser = (allUsers) => {\r\n        firstTimeRender.current = false \r\n        const currentActiveUser = allUsers.data.find(element => element.data.username === props.user);\r\n        setWord(currentActiveUser.data.vocab[set][0].word)\r\n        setActiveUser(currentActiveUser)\r\n    };\r\n\r\n    useEffect(() => {\r\n        if (!firstTimeRender.current) {\r\n            generateRandomAnswers()\r\n          }\r\n    },[activeUser])\r\n\r\n    const generateRandomAnswers = () => {\r\n        let array = activeUser.data.vocab[set]\r\n        let correctAnswer = activeUser.data.vocab[set][number].explanation\r\n        let newAnswers = [correctAnswer];\r\n        for(let i = 0; i <= 2;){\r\n            let number = Math.floor(Math.random() * Math.floor(array.length))\r\n            if(!newAnswers.includes(array[number].explanation)) {\r\n                newAnswers.push(array[number].explanation)\r\n                i++\r\n            }\r\n        }\r\n        // Durstenfeld Shuffle\r\n        for (let i = newAnswers.length - 1; i > 0; i--) {\r\n            let j = Math.floor(Math.random() * (i + 1));\r\n            let temp = newAnswers[i];\r\n            newAnswers[i] = newAnswers[j];\r\n            newAnswers[j] = temp;\r\n        }\r\n        setAnswers(newAnswers)\r\n    }\r\n\r\n    const nextWord = () => {\r\n        let newNumber = 0;\r\n        do {\r\n            newNumber = Math.floor(Math.random() * Math.floor(activeUser.data.vocab[set].length))\r\n        } while(newNumber === number);\r\n        setNumber(newNumber);\r\n    };\r\n\r\n    useEffect(() => {\r\n        if (!firstTimeRender.current) {\r\n            setWord(activeUser.data.vocab[set][number].word)\r\n            generateRandomAnswers()\r\n        }\r\n    },[number])\r\n\r\n    const selectAnswer = (e) => {\r\n        if(e.target.dataset.index === activeUser.data.vocab[set][number].explanation) {\r\n            e.target.className = 'option-div-correct' \r\n            setTimeout(function() {\r\n                e.target.className = 'option-div' \r\n                nextWord()\r\n            }, 1000)\r\n        } else {\r\n            e.target.className = 'option-div-incorrect'\r\n            setTimeout(function() {\r\n                e.target.className = 'option-div'\r\n            }, 350);\r\n        }\r\n    };\r\n\r\n    if(!activeUser){\r\n        return(\r\n            <div className='set-container'>\r\n                <Sidebar className='sidebar'></Sidebar>\r\n                <div className='set-main-container'>\r\n                    <div className=\"lds-ellipsis\"><div></div><div></div><div></div><div></div></div>\r\n                </div>\r\n            </div>\r\n        )\r\n    } else {\r\n    return(\r\n        <div className='quiz-page-container'>\r\n                <Sidebar className='sidebar'></Sidebar>\r\n                <div className='quiz-main-container'>\r\n                    <h1 className='quiz-main-title'>Quiz Yourself on the Words from the {set} Set</h1>\r\n                    <div className='quiz-container'>\r\n                        <div className='quiz-word'>\r\n                            {word}\r\n                        </div>\r\n                        <div className='quiz-answers'>\r\n                            {answers.map((answer) => (\r\n                                <div className='option-div'\r\n                                key={uniqid}\r\n                                data-index={answer}\r\n                                onClick={e => selectAnswer(e)}\r\n                                >{answer}</div>\r\n                            ))}\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n        </div>\r\n    )\r\n    }\r\n}","C:\\Users\\user\\Desktop\\word-associations\\src\\api.js",[],"C:\\Users\\user\\Desktop\\word-associations\\src\\components\\Sidebar.js",[],{"ruleId":"93","replacedBy":"94"},{"ruleId":"95","replacedBy":"96"},{"ruleId":"97","severity":1,"message":"98","line":9,"column":8,"nodeType":"99","messageId":"100","endLine":9,"endColumn":14},{"ruleId":"101","severity":1,"message":"102","line":54,"column":7,"nodeType":"103","endLine":54,"endColumn":9,"suggestions":"104"},{"ruleId":"101","severity":1,"message":"105","line":145,"column":8,"nodeType":"103","endLine":145,"endColumn":20,"suggestions":"106"},{"ruleId":"101","severity":1,"message":"102","line":36,"column":7,"nodeType":"103","endLine":36,"endColumn":9,"suggestions":"107"},{"ruleId":"101","severity":1,"message":"108","line":94,"column":8,"nodeType":"103","endLine":94,"endColumn":20,"suggestions":"109"},{"ruleId":"101","severity":1,"message":"102","line":35,"column":7,"nodeType":"103","endLine":35,"endColumn":9,"suggestions":"110"},{"ruleId":"101","severity":1,"message":"108","line":85,"column":8,"nodeType":"103","endLine":85,"endColumn":20,"suggestions":"111"},{"ruleId":"101","severity":1,"message":"102","line":35,"column":7,"nodeType":"103","endLine":35,"endColumn":9,"suggestions":"112"},{"ruleId":"101","severity":1,"message":"108","line":117,"column":8,"nodeType":"103","endLine":117,"endColumn":20,"suggestions":"113"},{"ruleId":"101","severity":1,"message":"102","line":24,"column":7,"nodeType":"103","endLine":24,"endColumn":9,"suggestions":"114"},{"ruleId":"101","severity":1,"message":"108","line":56,"column":8,"nodeType":"103","endLine":56,"endColumn":20,"suggestions":"115"},{"ruleId":"101","severity":1,"message":"102","line":28,"column":7,"nodeType":"103","endLine":28,"endColumn":9,"suggestions":"116"},{"ruleId":"97","severity":1,"message":"117","line":15,"column":13,"nodeType":"99","messageId":"100","endLine":15,"endColumn":20},{"ruleId":"101","severity":1,"message":"102","line":27,"column":7,"nodeType":"103","endLine":27,"endColumn":9,"suggestions":"118"},{"ruleId":"101","severity":1,"message":"119","line":40,"column":7,"nodeType":"103","endLine":40,"endColumn":19,"suggestions":"120"},{"ruleId":"101","severity":1,"message":"121","line":76,"column":7,"nodeType":"103","endLine":76,"endColumn":15,"suggestions":"122"},"no-native-reassign",["123"],"no-negated-in-lhs",["124"],"no-unused-vars","'Search' is defined but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'getActiveUser'. Either include it or remove the dependency array.","ArrayExpression",["125"],"React Hook useEffect has a missing dependency: 'uniqueId'. Either include it or remove the dependency array.",["126"],["127"],"React Hook useEffect has missing dependencies: 'props' and 'uniqueId'. Either include them or remove the dependency array. However, 'props' will change when *any* prop changes, so the preferred fix is to destructure the 'props' object outside of the useEffect call and refer to those specific props inside useEffect.",["128"],["129"],["130"],["131"],["132"],["133"],["134"],["135"],"'profile' is assigned a value but never used.",["136"],"React Hook useEffect has a missing dependency: 'generateRandomAnswers'. Either include it or remove the dependency array.",["137"],"React Hook useEffect has missing dependencies: 'activeUser.data.vocab', 'generateRandomAnswers', and 'set'. Either include them or remove the dependency array. You can also replace multiple useState variables with useReducer if 'setWord' needs the current value of 'activeUser.data.vocab'.",["138"],"no-global-assign","no-unsafe-negation",{"desc":"139","fix":"140"},{"desc":"141","fix":"142"},{"desc":"139","fix":"143"},{"desc":"144","fix":"145"},{"desc":"139","fix":"146"},{"desc":"144","fix":"147"},{"desc":"139","fix":"148"},{"desc":"144","fix":"149"},{"desc":"139","fix":"150"},{"desc":"144","fix":"151"},{"desc":"139","fix":"152"},{"desc":"139","fix":"153"},{"desc":"154","fix":"155"},{"desc":"156","fix":"157"},"Update the dependencies array to be: [getActiveUser]",{"range":"158","text":"159"},"Update the dependencies array to be: [activeUser, uniqueId]",{"range":"160","text":"161"},{"range":"162","text":"159"},"Update the dependencies array to be: [activeUser, props, uniqueId]",{"range":"163","text":"164"},{"range":"165","text":"159"},{"range":"166","text":"164"},{"range":"167","text":"159"},{"range":"168","text":"164"},{"range":"169","text":"159"},{"range":"170","text":"164"},{"range":"171","text":"159"},{"range":"172","text":"159"},"Update the dependencies array to be: [activeUser, generateRandomAnswers]",{"range":"173","text":"174"},"Update the dependencies array to be: [activeUser.data.vocab, generateRandomAnswers, number, set]",{"range":"175","text":"176"},[2091,2093],"[getActiveUser]",[5496,5508],"[activeUser, uniqueId]",[1428,1430],[3849,3861],"[activeUser, props, uniqueId]",[1321,1323],[3062,3074],[1239,1241],[4104,4116],[848,850],[2063,2075],[961,963],[947,949],[1376,1388],"[activeUser, generateRandomAnswers]",[2641,2649],"[activeUser.data.vocab, generateRandomAnswers, number, set]"]