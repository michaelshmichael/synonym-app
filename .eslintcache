[{"C:\\Users\\user\\word-associations\\src\\index.js":"1","C:\\Users\\user\\word-associations\\src\\reportWebVitals.js":"2","C:\\Users\\user\\word-associations\\src\\components\\Routes.js":"3","C:\\Users\\user\\word-associations\\src\\components\\Footer.js":"4","C:\\Users\\user\\word-associations\\src\\components\\Header.js":"5","C:\\Users\\user\\word-associations\\src\\components\\Registration.js":"6","C:\\Users\\user\\word-associations\\src\\components\\Login.js":"7","C:\\Users\\user\\word-associations\\src\\components\\Landing.js":"8","C:\\Users\\user\\word-associations\\src\\components\\Search.js":"9","C:\\Users\\user\\word-associations\\src\\components\\Profile.js":"10","C:\\Users\\user\\word-associations\\src\\components\\Vocab.js":"11","C:\\Users\\user\\word-associations\\src\\components\\Set.js":"12","C:\\Users\\user\\word-associations\\src\\api.js":"13","C:\\Users\\user\\word-associations\\src\\components\\Sidebar.js":"14","C:\\Users\\user\\word-associations\\src\\components\\VocabInfo.js":"15","C:\\Users\\user\\word-associations\\src\\components\\WordAPI.js":"16","C:\\Users\\user\\word-associations\\src\\components\\Quiz.js":"17"},{"size":347,"mtime":1612791464852,"results":"18","hashOfConfig":"19"},{"size":375,"mtime":1612791464853,"results":"20","hashOfConfig":"19"},{"size":3519,"mtime":1613384597296,"results":"21","hashOfConfig":"19"},{"size":764,"mtime":1612791464844,"results":"22","hashOfConfig":"19"},{"size":874,"mtime":1613384287031,"results":"23","hashOfConfig":"19"},{"size":6696,"mtime":1613220341892,"results":"24","hashOfConfig":"19"},{"size":2581,"mtime":1613288626256,"results":"25","hashOfConfig":"19"},{"size":911,"mtime":1613220077020,"results":"26","hashOfConfig":"19"},{"size":8155,"mtime":1612951291349,"results":"27","hashOfConfig":"19"},{"size":7180,"mtime":1613384284296,"results":"28","hashOfConfig":"19"},{"size":5048,"mtime":1613384299481,"results":"29","hashOfConfig":"19"},{"size":5332,"mtime":1613384392922,"results":"30","hashOfConfig":"19"},{"size":514,"mtime":1612791464844,"results":"31","hashOfConfig":"19"},{"size":560,"mtime":1613288203651,"results":"32","hashOfConfig":"19"},{"size":3797,"mtime":1613285977851,"results":"33","hashOfConfig":"19"},{"size":2206,"mtime":1613286697307,"results":"34","hashOfConfig":"19"},{"size":3791,"mtime":1613390747789,"results":"35","hashOfConfig":"19"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},"16uwjsd",{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"55","usedDeprecatedRules":"38"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"58","messages":"59","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"60","messages":"61","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"68","usedDeprecatedRules":"38"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"71","usedDeprecatedRules":"38"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"C:\\Users\\user\\word-associations\\src\\index.js",[],["74","75"],"C:\\Users\\user\\word-associations\\src\\reportWebVitals.js",[],"C:\\Users\\user\\word-associations\\src\\components\\Routes.js",[],"C:\\Users\\user\\word-associations\\src\\components\\Footer.js",[],"C:\\Users\\user\\word-associations\\src\\components\\Header.js",[],"C:\\Users\\user\\word-associations\\src\\components\\Registration.js",[],"C:\\Users\\user\\word-associations\\src\\components\\Login.js",[],"C:\\Users\\user\\word-associations\\src\\components\\Landing.js",[],"C:\\Users\\user\\word-associations\\src\\components\\Search.js",["76","77"],"import React, { useRef, useState, useEffect } from 'react';\r\nimport APIEndpoints from '../api';\r\nimport { BiMessageSquareAdd } from 'react-icons/bi';\r\nimport axios from 'axios';\r\nimport Sidebar from './Sidebar.js';\r\nimport unitedKingdom from '../svg/unitedKingdom.svg';\r\nimport russia from '../svg/russia.svg';\r\nimport portugal from '../svg/portugal.svg';\r\nimport italy from '../svg/italy.svg';\r\nimport france from '../svg/france.svg';\r\nimport germany from '../svg/germany.svg';\r\nimport spain from '../svg/spain.svg';\r\nimport '../styles/Search.scss';\r\n\r\nexport default function Search(props) {\r\n    const [searchWord, setSearchWord] = useState('');\r\n    const [associationArray, setAssociationArray] = useState([]);\r\n    const [activeUser, setActiveUser] = useState('');\r\n    const [uniqueId, setUniqueId] = useState('');\r\n    const inputRef = useRef();\r\n    const searchButton = useRef();\r\n    \r\n    // Rename this\r\n    let searchHeader;\r\n    if (props.language === 'en') {\r\n        searchHeader = 'Search in English';\r\n    } else if (props.language === 'ru') {\r\n        searchHeader = 'Search in Russian';\r\n    } else if (props.language === 'pt') {\r\n        searchHeader = 'Search in Portuguese'\r\n    } else if (props.language === 'de') {\r\n        searchHeader = 'Search in German';\r\n    } else if (props.language === 'fr') {\r\n        searchHeader = 'Search in French';\r\n    } else if (props.language === 'it') {\r\n        searchHeader = 'Search in Italian';\r\n    } else if (props.language === 'es') {\r\n        searchHeader = 'Search in Spanish';\r\n    }\r\n\r\n    // These two functions are repeated from the profile page. Could be refactored I'm sure.\r\n    useEffect(() => {\r\n        async function getUserData () {\r\n            try {\r\n                const allUsers = await axios.get(APIEndpoints.userDataEndpoint, {withCredentials: true});\r\n                getActiveUser(allUsers);\r\n                console.log('ALL USERS')\r\n                console.log(allUsers)\r\n            } catch (error) {\r\n                console.error(error);\r\n            }\r\n        }\r\n        getUserData();\r\n    },[]);\r\n\r\n    const getActiveUser = (allUsers) => {\r\n        const currentActiveUser = allUsers.data.find(element => element.data.username === props.user);\r\n        setActiveUser(currentActiveUser);\r\n        setUniqueId(currentActiveUser.uniqueId);\r\n    };\r\n\r\n    const createNewSearchFromResult = (e) =>  {\r\n        setSearchWord(e);\r\n        inputRef.current.value = e;\r\n        searchButton.current.focus();\r\n    };\r\n\r\n    class association {\r\n        constructor(meaning, partOfSpeech, weight){\r\n            this.meaning = meaning\r\n            this.partOfSpeech = partOfSpeech;\r\n            this.weight = weight;\r\n        }\r\n    };\r\n    \r\n    async function _getAssociations () {\r\n        try {\r\n            let data = await fetch(`https://api.wordassociations.net/associations/v1.0/json/search?apikey=5b4acb51-a76e-4d05-9349-8044794dea94&text=${searchWord}&lang=${props.language}&limit=10`, \r\n            {mode: 'no-cors'},\r\n            {'Access-Control-Allow-Origin': '*'})\r\n            let words = await data.json()\r\n            console.log(words)\r\n            return words\r\n        } catch {\r\n            console.log('Error')\r\n        }\r\n    };\r\n\r\n    const _makeAssociationData = (data, i) => {\r\n        let defaultAssociation = new association();\r\n        defaultAssociation.meaning = data.response[0].items[i].item\r\n        defaultAssociation.partOfSpeech = data.response[0].items[i].pos\r\n        defaultAssociation.weight = data.response[0].items[i].weight\r\n        return defaultAssociation\r\n    }\r\n    \r\n    async function setAssociations () {\r\n        let words = await _getAssociations()\r\n        if(words.response[0].items.length !== 0) {\r\n            let placeholderArray = []\r\n            for(let i=0; i < 10; i++) {\r\n                let association =_makeAssociationData(words, i)\r\n                placeholderArray.push(association)\r\n            }\r\n            setAssociationArray(placeholderArray)\r\n        } else {\r\n            alert('Try new word')\r\n        }  \r\n    };\r\n\r\n    const addWordToActiveUserVocab = (newAssociatedWord) => {\r\n        let updatedVocab\r\n        if(activeUser.data.vocab.miscellaneous){\r\n            updatedVocab = [...activeUser.data.vocab.miscellaneous, newAssociatedWord]\r\n        } else {\r\n            updatedVocab = [newAssociatedWord]\r\n        }\r\n        setActiveUser((prevState) => {\r\n            const newState = Object.assign({}, prevState);\r\n            newState.data.vocab.miscellaneous = updatedVocab;\r\n            return newState;\r\n        });\r\n        console.log(activeUser.data.vocab.miscellaneous)\r\n    };\r\n\r\n    useEffect(() => {\r\n        if(uniqueId){\r\n            async function updateUserAssociatedWords() {\r\n                console.log('Associated Words')\r\n                console.log(activeUser)\r\n                try {\r\n                    const updatedUser = await axios.put(`https://app.yawe.dev/api/1/ce/non-auth-endpoint?key=b0188b53ea77419ba1d6dcda06e4bea9&uniqueId=${uniqueId}`, \r\n                    activeUser.data,\r\n                    { withCredentials: true },\r\n                    { headers: {'Content-Type': 'application/json'}}\r\n                    )\r\n                    console.log('UPDATED USER')\r\n                    console.log(updatedUser.data)\r\n                } catch (error) {\r\n                    console.log(error)\r\n                }\r\n            }\r\n            updateUserAssociatedWords();\r\n        };\r\n    }, [activeUser])\r\n\r\n    return (\r\n        <div className='search-page-container'>\r\n            <Sidebar className='sidebar'></Sidebar>\r\n            <div className='search-and-results-container'>\r\n                <div className='language-flags-container'>\r\n                    <img className='language-flags' src={unitedKingdom} alt='united-kingdom' onClick={e => props.setLanguage('en')}/>\r\n                    <img className='language-flags' src={russia} alt='russia' onClick={e => props.setLanguage('ru')}/>\r\n                    <img className='language-flags' src={portugal} alt='portugal' onClick={e => props.setLanguage('pt')}/>\r\n                    <img className='language-flags' src={italy} alt='italy' onClick={e => props.setLanguage('it')}/>\r\n                    <img className='language-flags' src={germany} alt='germany' onClick={e => props.setLanguage('de')}/>\r\n                    <img className='language-flags' src={spain} alt='spain' onClick={e => props.setLanguage('es')}/>\r\n                    <img className='language-flags' src={france} alt='france' onClick={e => props.setLanguage('fr')}/>\r\n                    \r\n                </div>\r\n                <div className='search-container'>\r\n                    <h2>{searchHeader}</h2>\r\n                    <div className='search-input-and-button'>\r\n                        <input ref={inputRef} type='text' className='search-input-text' \r\n                        onChange={e => setSearchWord(e.target.value)}>\r\n                        </input>\r\n                        <button ref={searchButton} className='find-synonyms-button' \r\n                        onClick={setAssociations}>Find Associations\r\n                        </button>\r\n                    </div>\r\n                </div>\r\n                <div className='association-container'>\r\n                {associationArray.map((word) => {\r\n                    return<div data-index={word.meaning} className='association-box' onClick={e => createNewSearchFromResult(e.target.dataset.index)}>\r\n                        <p data-index={word.meaning}>{word.meaning}</p>\r\n                        <BiMessageSquareAdd\r\n                            className='add-word-icon'\r\n                            data-index={word.meaning}\r\n                            onClick={e => addWordToActiveUserVocab(e.target.dataset.index)}\r\n                        />\r\n                        <p data-index={word.meaning}>{word.partOfSpeech}</p>\r\n                        <p data-index={word.meaning}>{word.weight}</p>\r\n                        \r\n                    </div>\r\n                })}\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n","C:\\Users\\user\\word-associations\\src\\components\\Profile.js",["78","79"],"C:\\Users\\user\\word-associations\\src\\components\\Vocab.js",["80","81"],"C:\\Users\\user\\word-associations\\src\\components\\Set.js",["82","83"],"C:\\Users\\user\\word-associations\\src\\api.js",[],"C:\\Users\\user\\word-associations\\src\\components\\Sidebar.js",[],"C:\\Users\\user\\word-associations\\src\\components\\VocabInfo.js",["84","85"],"import React, { useState, useEffect } from 'react';\r\nimport { useParams } from 'react-router-dom';\r\nimport axios from 'axios';\r\nimport APIEndpoints from '../api';\r\nimport Sidebar from './Sidebar';\r\nimport WordAPI from './WordAPI'\r\nimport '../styles/VocabInfo.scss';\r\n\r\nexport default function VocabInfo (props) {\r\n    const [activeUser, setActiveUser] = useState('');\r\n    const [uniqueId, setUniqueId] = useState('');\r\n    const [explanation, setExplanation] = useState('');\r\n    const [example, setExample] = useState('');\r\n    const { set, vocabItem } = useParams(); \r\n\r\n    useEffect(() => {\r\n        async function getUserData () {\r\n            try {\r\n                const allUsers = await axios.get(APIEndpoints.userDataEndpoint, {withCredentials: true});\r\n                getActiveUser(allUsers);\r\n            } catch (error) {\r\n                console.error(error);\r\n            }\r\n        }\r\n        getUserData();\r\n    },[]);\r\n\r\n    const getActiveUser = (allUsers) => {\r\n        const currentActiveUser = allUsers.data.find(element => element.data.username === props.user);\r\n        setActiveUser(currentActiveUser);\r\n        setUniqueId(currentActiveUser.uniqueId);\r\n        let currentWord = currentActiveUser.data.vocab[set].find(({word}) => word === vocabItem)\r\n        setExplanation(currentWord.explanation)\r\n        setExample(currentWord.example)\r\n    };\r\n\r\n    const updateExplanation = (e) => {\r\n        console.log(e.target.value)\r\n        let currentWord = activeUser.data.vocab[set].find(({word}) => word === vocabItem)\r\n        setActiveUser((prevState) => {\r\n            const newState = Object.assign({}, prevState);\r\n            currentWord.explanation = e.target.value;\r\n            return newState;\r\n        });\r\n    };\r\n\r\n    const updateExample = (e) => {\r\n        console.log(e.target.value)\r\n        let currentWord = activeUser.data.vocab[set].find(({word}) => word === vocabItem)\r\n        setActiveUser((prevState) => {\r\n            const newState = Object.assign({}, prevState);\r\n            currentWord.example = e.target.value;\r\n            return newState;\r\n        });\r\n    }\r\n\r\n    useEffect(() => {\r\n        props.updateUser(uniqueId, activeUser);\r\n    }, [activeUser])\r\n    \r\n    if(!activeUser) {\r\n        return(\r\n            <div className='vocab-item-page-container'>\r\n                <Sidebar className='sidebar'></Sidebar>\r\n                <div className='vocab-item-main-container'>\r\n                    <div className=\"lds-ellipsis\"><div></div><div></div><div></div><div></div></div>\r\n                </div>\r\n            </div>\r\n        )\r\n    } else {\r\n        return(\r\n            <div className='vocab-item-page-container'>\r\n                <Sidebar className='sidebar'></Sidebar>\r\n                <div className='vocab-item-main-container'>\r\n                    <div className='vocab-item-user-data'>\r\n                        <h1 className='vocab-item-word'>Word: {vocabItem}</h1>\r\n                        <h1 className='vocab-item-definition'>Your Explanation: </h1>\r\n                        <input className='vocab-item-definition-input' type='text' \r\n                        placeholder={explanation}\r\n                        onChange={e => updateExplanation(e)}\r\n                        />\r\n                    </div>\r\n                    \r\n                    <WordAPI\r\n                        vocabItem={vocabItem}\r\n                    />\r\n                    <div className='vocab-item-example'>\r\n                        <h2>Example Sentence</h2>\r\n                            <input type='text'\r\n                            placeholder={example}\r\n                            onChange={e => updateExample(e)}\r\n                            />\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n};","C:\\Users\\user\\word-associations\\src\\components\\WordAPI.js",["86"],"import React, { useState, useEffect } from 'react';\r\nimport axios from 'axios';\r\nimport '../styles/VocabInfo.scss';\r\n\r\nexport default function WordAPI (props) {\r\n    const [APIdefinition, setAPIDefinition] = useState('');\r\n    const [APIpronunciation, setAPIPronunciation] = useState('');\r\n    const [definitionNumber, setDefinitionNumber] = useState(0);\r\n    const [previousDefinitionButton, setPreviousDefinitionButton] = useState(false)\r\n\r\n    useEffect(() => {\r\n        async function WordAPICall () {\r\n            try {\r\n                const result = await axios.get(`https://wordsapiv1.p.rapidapi.com/words/${props.vocabItem}`,\r\n                    {headers: {\r\n                        'x-rapidapi-key': 'f74c925871msh70f9c315d6fed91p101f0cjsn861ef3bc1f60',\r\n                        'x-rapidapi-host': 'wordsapiv1.p.rapidapi.com'\r\n                    }})\r\n                    setAPIPronunciation(result.data.pronunciation.all);\r\n                    setAPIDefinition(result.data.results[definitionNumber].definition);\r\n                    console.log(result)             \r\n                } catch (error) {\r\n                console.log(error)\r\n            }\r\n        }\r\n        WordAPICall();\r\n    },[definitionNumber]);\r\n\r\n    const toggleDefinitionNumber = (e) => {\r\n        if(previousDefinitionButton === true && definitionNumber >= 0){\r\n            setPreviousDefinitionButton(false)\r\n        }\r\n        let newNumber;\r\n        e.target.dataset.index === 'forward' \r\n        ? newNumber = definitionNumber +1 \r\n        : newNumber = definitionNumber -1\r\n        setDefinitionNumber(newNumber);\r\n        if(definitionNumber === 0){\r\n            setPreviousDefinitionButton(true)\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className='vocab-item-api-data'>\r\n            <h3>Pronunciation</h3>\r\n                <h2>{APIpronunciation}</h2>\r\n            <h3>Definition</h3>\r\n                <h2>{APIdefinition}</h2>\r\n\r\n            <button data-index='back' disabled={previousDefinitionButton} onClick={e => toggleDefinitionNumber(e)}>Previous Definition</button>\r\n            <button data-index='forward' onClick={e => toggleDefinitionNumber(e)}>Next Definition</button>\r\n        </div>\r\n    )\r\n}","C:\\Users\\user\\word-associations\\src\\components\\Quiz.js",["87","88","89"],{"ruleId":"90","replacedBy":"91"},{"ruleId":"92","replacedBy":"93"},{"ruleId":"94","severity":1,"message":"95","line":54,"column":7,"nodeType":"96","endLine":54,"endColumn":9,"suggestions":"97"},{"ruleId":"94","severity":1,"message":"98","line":145,"column":8,"nodeType":"96","endLine":145,"endColumn":20,"suggestions":"99"},{"ruleId":"94","severity":1,"message":"95","line":37,"column":7,"nodeType":"96","endLine":37,"endColumn":9,"suggestions":"100"},{"ruleId":"94","severity":1,"message":"98","line":112,"column":8,"nodeType":"96","endLine":112,"endColumn":20,"suggestions":"101"},{"ruleId":"94","severity":1,"message":"95","line":35,"column":7,"nodeType":"96","endLine":35,"endColumn":9,"suggestions":"102"},{"ruleId":"94","severity":1,"message":"103","line":85,"column":8,"nodeType":"96","endLine":85,"endColumn":20,"suggestions":"104"},{"ruleId":"94","severity":1,"message":"95","line":32,"column":7,"nodeType":"96","endLine":32,"endColumn":9,"suggestions":"105"},{"ruleId":"94","severity":1,"message":"103","line":80,"column":8,"nodeType":"96","endLine":80,"endColumn":20,"suggestions":"106"},{"ruleId":"94","severity":1,"message":"95","line":26,"column":7,"nodeType":"96","endLine":26,"endColumn":9,"suggestions":"107"},{"ruleId":"94","severity":1,"message":"103","line":59,"column":8,"nodeType":"96","endLine":59,"endColumn":20,"suggestions":"108"},{"ruleId":"94","severity":1,"message":"109","line":27,"column":7,"nodeType":"96","endLine":27,"endColumn":25,"suggestions":"110"},{"ruleId":"111","severity":1,"message":"112","line":15,"column":13,"nodeType":"113","messageId":"114","endLine":15,"endColumn":20},{"ruleId":"94","severity":1,"message":"95","line":27,"column":7,"nodeType":"96","endLine":27,"endColumn":9,"suggestions":"115"},{"ruleId":"94","severity":1,"message":"116","line":41,"column":7,"nodeType":"96","endLine":41,"endColumn":19,"suggestions":"117"},"no-native-reassign",["118"],"no-negated-in-lhs",["119"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'getActiveUser'. Either include it or remove the dependency array.","ArrayExpression",["120"],"React Hook useEffect has a missing dependency: 'uniqueId'. Either include it or remove the dependency array.",["121"],["122"],["123"],["124"],"React Hook useEffect has missing dependencies: 'props' and 'uniqueId'. Either include them or remove the dependency array. However, 'props' will change when *any* prop changes, so the preferred fix is to destructure the 'props' object outside of the useEffect call and refer to those specific props inside useEffect.",["125"],["126"],["127"],["128"],["129"],"React Hook useEffect has a missing dependency: 'props.vocabItem'. Either include it or remove the dependency array.",["130"],"no-unused-vars","'profile' is assigned a value but never used.","Identifier","unusedVar",["131"],"React Hook useEffect has a missing dependency: 'generateRandomAnswers'. Either include it or remove the dependency array.",["132"],"no-global-assign","no-unsafe-negation",{"desc":"133","fix":"134"},{"desc":"135","fix":"136"},{"desc":"133","fix":"137"},{"desc":"135","fix":"138"},{"desc":"133","fix":"139"},{"desc":"140","fix":"141"},{"desc":"133","fix":"142"},{"desc":"140","fix":"143"},{"desc":"133","fix":"144"},{"desc":"140","fix":"145"},{"desc":"146","fix":"147"},{"desc":"133","fix":"148"},{"desc":"149","fix":"150"},"Update the dependencies array to be: [getActiveUser]",{"range":"151","text":"152"},"Update the dependencies array to be: [activeUser, uniqueId]",{"range":"153","text":"154"},{"range":"155","text":"152"},{"range":"156","text":"154"},{"range":"157","text":"152"},"Update the dependencies array to be: [activeUser, props, uniqueId]",{"range":"158","text":"159"},{"range":"160","text":"152"},{"range":"161","text":"159"},{"range":"162","text":"152"},{"range":"163","text":"159"},"Update the dependencies array to be: [definitionNumber, props.vocabItem]",{"range":"164","text":"165"},{"range":"166","text":"152"},"Update the dependencies array to be: [activeUser, generateRandomAnswers]",{"range":"167","text":"168"},[2091,2093],"[getActiveUser]",[5496,5508],"[activeUser, uniqueId]",[1429,1431],[4590,4602],[1321,1323],[3062,3074],"[activeUser, props, uniqueId]",[1126,1128],[2830,2842],[932,934],[2200,2212],[1206,1224],"[definitionNumber, props.vocabItem]",[947,949],[1416,1428],"[activeUser, generateRandomAnswers]"]