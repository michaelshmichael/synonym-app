[{"C:\\Users\\user\\word-associations\\src\\index.js":"1","C:\\Users\\user\\word-associations\\src\\reportWebVitals.js":"2","C:\\Users\\user\\word-associations\\src\\components\\Routes.js":"3","C:\\Users\\user\\word-associations\\src\\components\\Footer.js":"4","C:\\Users\\user\\word-associations\\src\\components\\Header.js":"5","C:\\Users\\user\\word-associations\\src\\components\\Registration.js":"6","C:\\Users\\user\\word-associations\\src\\components\\Login.js":"7","C:\\Users\\user\\word-associations\\src\\components\\Landing.js":"8","C:\\Users\\user\\word-associations\\src\\components\\Search.js":"9","C:\\Users\\user\\word-associations\\src\\components\\Profile.js":"10","C:\\Users\\user\\word-associations\\src\\components\\Vocab.js":"11","C:\\Users\\user\\word-associations\\src\\components\\Set.js":"12","C:\\Users\\user\\word-associations\\src\\api.js":"13","C:\\Users\\user\\word-associations\\src\\components\\Sidebar.js":"14","C:\\Users\\user\\word-associations\\src\\components\\ProfileData.js":"15","C:\\Users\\user\\word-associations\\src\\components\\VocabInfo.js":"16","C:\\Users\\user\\word-associations\\src\\components\\WordAPI.js":"17"},{"size":347,"mtime":1612791464852,"results":"18","hashOfConfig":"19"},{"size":375,"mtime":1612791464853,"results":"20","hashOfConfig":"19"},{"size":3240,"mtime":1613218724613,"results":"21","hashOfConfig":"19"},{"size":764,"mtime":1612791464844,"results":"22","hashOfConfig":"19"},{"size":864,"mtime":1612791464845,"results":"23","hashOfConfig":"19"},{"size":6307,"mtime":1613052853843,"results":"24","hashOfConfig":"19"},{"size":2498,"mtime":1613220065945,"results":"25","hashOfConfig":"19"},{"size":1171,"mtime":1613219638176,"results":"26","hashOfConfig":"19"},{"size":8155,"mtime":1612951291349,"results":"27","hashOfConfig":"19"},{"size":367,"mtime":1612791464848,"results":"28","hashOfConfig":"19"},{"size":4698,"mtime":1613218001617,"results":"29","hashOfConfig":"19"},{"size":5111,"mtime":1613218051953,"results":"30","hashOfConfig":"19"},{"size":514,"mtime":1612791464844,"results":"31","hashOfConfig":"19"},{"size":401,"mtime":1612791464850,"results":"32","hashOfConfig":"19"},{"size":6738,"mtime":1612879024431,"results":"33","hashOfConfig":"19"},{"size":2989,"mtime":1613218788753,"results":"34","hashOfConfig":"19"},{"size":2374,"mtime":1613049831003,"results":"35","hashOfConfig":"19"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},"16uwjsd",{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"53","messages":"54","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"55","usedDeprecatedRules":"38"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"60","messages":"61","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"68","usedDeprecatedRules":"38"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"71","messages":"72","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"73","usedDeprecatedRules":"38"},"C:\\Users\\user\\word-associations\\src\\index.js",[],["74","75"],"C:\\Users\\user\\word-associations\\src\\reportWebVitals.js",[],"C:\\Users\\user\\word-associations\\src\\components\\Routes.js",[],"C:\\Users\\user\\word-associations\\src\\components\\Footer.js",[],"C:\\Users\\user\\word-associations\\src\\components\\Header.js",[],"C:\\Users\\user\\word-associations\\src\\components\\Registration.js",[],"C:\\Users\\user\\word-associations\\src\\components\\Login.js",[],"C:\\Users\\user\\word-associations\\src\\components\\Landing.js",[],"C:\\Users\\user\\word-associations\\src\\components\\Search.js",["76","77"],"import React, { useRef, useState, useEffect } from 'react';\r\nimport APIEndpoints from '../api';\r\nimport { BiMessageSquareAdd } from 'react-icons/bi';\r\nimport axios from 'axios';\r\nimport Sidebar from './Sidebar.js';\r\nimport unitedKingdom from '../svg/unitedKingdom.svg';\r\nimport russia from '../svg/russia.svg';\r\nimport portugal from '../svg/portugal.svg';\r\nimport italy from '../svg/italy.svg';\r\nimport france from '../svg/france.svg';\r\nimport germany from '../svg/germany.svg';\r\nimport spain from '../svg/spain.svg';\r\nimport '../styles/Search.scss';\r\n\r\nexport default function Search(props) {\r\n    const [searchWord, setSearchWord] = useState('');\r\n    const [associationArray, setAssociationArray] = useState([]);\r\n    const [activeUser, setActiveUser] = useState('');\r\n    const [uniqueId, setUniqueId] = useState('');\r\n    const inputRef = useRef();\r\n    const searchButton = useRef();\r\n    \r\n    // Rename this\r\n    let searchHeader;\r\n    if (props.language === 'en') {\r\n        searchHeader = 'Search in English';\r\n    } else if (props.language === 'ru') {\r\n        searchHeader = 'Search in Russian';\r\n    } else if (props.language === 'pt') {\r\n        searchHeader = 'Search in Portuguese'\r\n    } else if (props.language === 'de') {\r\n        searchHeader = 'Search in German';\r\n    } else if (props.language === 'fr') {\r\n        searchHeader = 'Search in French';\r\n    } else if (props.language === 'it') {\r\n        searchHeader = 'Search in Italian';\r\n    } else if (props.language === 'es') {\r\n        searchHeader = 'Search in Spanish';\r\n    }\r\n\r\n    // These two functions are repeated from the profile page. Could be refactored I'm sure.\r\n    useEffect(() => {\r\n        async function getUserData () {\r\n            try {\r\n                const allUsers = await axios.get(APIEndpoints.userDataEndpoint, {withCredentials: true});\r\n                getActiveUser(allUsers);\r\n                console.log('ALL USERS')\r\n                console.log(allUsers)\r\n            } catch (error) {\r\n                console.error(error);\r\n            }\r\n        }\r\n        getUserData();\r\n    },[]);\r\n\r\n    const getActiveUser = (allUsers) => {\r\n        const currentActiveUser = allUsers.data.find(element => element.data.username === props.user);\r\n        setActiveUser(currentActiveUser);\r\n        setUniqueId(currentActiveUser.uniqueId);\r\n    };\r\n\r\n    const createNewSearchFromResult = (e) =>  {\r\n        setSearchWord(e);\r\n        inputRef.current.value = e;\r\n        searchButton.current.focus();\r\n    };\r\n\r\n    class association {\r\n        constructor(meaning, partOfSpeech, weight){\r\n            this.meaning = meaning\r\n            this.partOfSpeech = partOfSpeech;\r\n            this.weight = weight;\r\n        }\r\n    };\r\n    \r\n    async function _getAssociations () {\r\n        try {\r\n            let data = await fetch(`https://api.wordassociations.net/associations/v1.0/json/search?apikey=5b4acb51-a76e-4d05-9349-8044794dea94&text=${searchWord}&lang=${props.language}&limit=10`, \r\n            {mode: 'no-cors'},\r\n            {'Access-Control-Allow-Origin': '*'})\r\n            let words = await data.json()\r\n            console.log(words)\r\n            return words\r\n        } catch {\r\n            console.log('Error')\r\n        }\r\n    };\r\n\r\n    const _makeAssociationData = (data, i) => {\r\n        let defaultAssociation = new association();\r\n        defaultAssociation.meaning = data.response[0].items[i].item\r\n        defaultAssociation.partOfSpeech = data.response[0].items[i].pos\r\n        defaultAssociation.weight = data.response[0].items[i].weight\r\n        return defaultAssociation\r\n    }\r\n    \r\n    async function setAssociations () {\r\n        let words = await _getAssociations()\r\n        if(words.response[0].items.length !== 0) {\r\n            let placeholderArray = []\r\n            for(let i=0; i < 10; i++) {\r\n                let association =_makeAssociationData(words, i)\r\n                placeholderArray.push(association)\r\n            }\r\n            setAssociationArray(placeholderArray)\r\n        } else {\r\n            alert('Try new word')\r\n        }  \r\n    };\r\n\r\n    const addWordToActiveUserVocab = (newAssociatedWord) => {\r\n        let updatedVocab\r\n        if(activeUser.data.vocab.miscellaneous){\r\n            updatedVocab = [...activeUser.data.vocab.miscellaneous, newAssociatedWord]\r\n        } else {\r\n            updatedVocab = [newAssociatedWord]\r\n        }\r\n        setActiveUser((prevState) => {\r\n            const newState = Object.assign({}, prevState);\r\n            newState.data.vocab.miscellaneous = updatedVocab;\r\n            return newState;\r\n        });\r\n        console.log(activeUser.data.vocab.miscellaneous)\r\n    };\r\n\r\n    useEffect(() => {\r\n        if(uniqueId){\r\n            async function updateUserAssociatedWords() {\r\n                console.log('Associated Words')\r\n                console.log(activeUser)\r\n                try {\r\n                    const updatedUser = await axios.put(`https://app.yawe.dev/api/1/ce/non-auth-endpoint?key=b0188b53ea77419ba1d6dcda06e4bea9&uniqueId=${uniqueId}`, \r\n                    activeUser.data,\r\n                    { withCredentials: true },\r\n                    { headers: {'Content-Type': 'application/json'}}\r\n                    )\r\n                    console.log('UPDATED USER')\r\n                    console.log(updatedUser.data)\r\n                } catch (error) {\r\n                    console.log(error)\r\n                }\r\n            }\r\n            updateUserAssociatedWords();\r\n        };\r\n    }, [activeUser])\r\n\r\n    return (\r\n        <div className='search-page-container'>\r\n            <Sidebar className='sidebar'></Sidebar>\r\n            <div className='search-and-results-container'>\r\n                <div className='language-flags-container'>\r\n                    <img className='language-flags' src={unitedKingdom} alt='united-kingdom' onClick={e => props.setLanguage('en')}/>\r\n                    <img className='language-flags' src={russia} alt='russia' onClick={e => props.setLanguage('ru')}/>\r\n                    <img className='language-flags' src={portugal} alt='portugal' onClick={e => props.setLanguage('pt')}/>\r\n                    <img className='language-flags' src={italy} alt='italy' onClick={e => props.setLanguage('it')}/>\r\n                    <img className='language-flags' src={germany} alt='germany' onClick={e => props.setLanguage('de')}/>\r\n                    <img className='language-flags' src={spain} alt='spain' onClick={e => props.setLanguage('es')}/>\r\n                    <img className='language-flags' src={france} alt='france' onClick={e => props.setLanguage('fr')}/>\r\n                    \r\n                </div>\r\n                <div className='search-container'>\r\n                    <h2>{searchHeader}</h2>\r\n                    <div className='search-input-and-button'>\r\n                        <input ref={inputRef} type='text' className='search-input-text' \r\n                        onChange={e => setSearchWord(e.target.value)}>\r\n                        </input>\r\n                        <button ref={searchButton} className='find-synonyms-button' \r\n                        onClick={setAssociations}>Find Associations\r\n                        </button>\r\n                    </div>\r\n                </div>\r\n                <div className='association-container'>\r\n                {associationArray.map((word) => {\r\n                    return<div data-index={word.meaning} className='association-box' onClick={e => createNewSearchFromResult(e.target.dataset.index)}>\r\n                        <p data-index={word.meaning}>{word.meaning}</p>\r\n                        <BiMessageSquareAdd\r\n                            className='add-word-icon'\r\n                            data-index={word.meaning}\r\n                            onClick={e => addWordToActiveUserVocab(e.target.dataset.index)}\r\n                        />\r\n                        <p data-index={word.meaning}>{word.partOfSpeech}</p>\r\n                        <p data-index={word.meaning}>{word.weight}</p>\r\n                        \r\n                    </div>\r\n                })}\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n","C:\\Users\\user\\word-associations\\src\\components\\Profile.js",[],"C:\\Users\\user\\word-associations\\src\\components\\Vocab.js",["78","79"],"C:\\Users\\user\\word-associations\\src\\components\\Set.js",["80","81"],"C:\\Users\\user\\word-associations\\src\\api.js",[],"C:\\Users\\user\\word-associations\\src\\components\\Sidebar.js",[],"C:\\Users\\user\\word-associations\\src\\components\\ProfileData.js",["82","83"],"import { React, useEffect, useState } from 'react';\r\nimport {formatDistance} from 'date-fns';\r\nimport { FaTrashAlt } from 'react-icons/fa';\r\nimport parseISO from 'date-fns/parseISO';\r\nimport axios from 'axios';\r\nimport unitedKingdom from '../svg/unitedKingdom.svg';\r\nimport russia from '../svg/russia.svg';\r\nimport portugal from '../svg/portugal.svg';\r\nimport italy from '../svg/italy.svg';\r\nimport france from '../svg/france.svg';\r\nimport germany from '../svg/germany.svg';\r\nimport spain from '../svg/spain.svg';\r\nimport APIEndpoints from '../api';\r\n\r\nexport default function ProfileData(props) {\r\n    const [activeUser, setActiveUser] = useState('');\r\n    const [uniqueId, setUniqueId] = useState('');\r\n    const [nativeLanguageFlag, setNativeLanguageFlag] = useState();\r\n    const [newLearningLanguage, setNewLearningLanguage] = useState('English');\r\n    const [userCreatedDate, setUserCreatedDate] = useState();\r\n\r\n    useEffect(() => {\r\n        async function getUserData () {\r\n            try {\r\n                const allUsers = await axios.get(APIEndpoints.userDataEndpoint, {withCredentials: true});\r\n                getActiveUser(allUsers);\r\n            } catch (error) {\r\n                console.error(error);\r\n            }\r\n        }\r\n        getUserData();\r\n    },[]);\r\n\r\n    const displayFlag = (userData) => {\r\n        if(userData.nativeLanguage === 'Portuguese') {\r\n            setNativeLanguageFlag(portugal)\r\n        } else if (userData.nativeLanguage === 'French') {\r\n            setNativeLanguageFlag(france)\r\n        } else if (userData.nativeLanguage === 'Italian') {\r\n            setNativeLanguageFlag(italy) \r\n        } else if (userData.nativeLanguage === 'German') {\r\n            setNativeLanguageFlag(germany)\r\n        } else if (userData.nativeLanguage === 'Russian') {\r\n            setNativeLanguageFlag(russia)\r\n        } else if (userData.nativeLanguage === 'Spanish') {\r\n            setNativeLanguageFlag(spain)\r\n        } else if (userData.nativeLanguage === 'English') {\r\n            setNativeLanguageFlag(unitedKingdom)\r\n        }\r\n    };\r\n\r\n    const getActiveUser = (allUsers) => {\r\n        const currentActiveUser = allUsers.data.find(element => element.data.username === props.user);\r\n        let dateCreated = currentActiveUser.createdAt.slice(0,10);\r\n        setUserCreatedDate(dateCreated);\r\n        displayFlag(currentActiveUser.data);\r\n        setActiveUser(currentActiveUser);\r\n        console.log(currentActiveUser)\r\n        setUniqueId(currentActiveUser.uniqueId);\r\n    }\r\n\r\n    const addLanguage = () => {\r\n        if(activeUser.data.nativeLanguage === newLearningLanguage){\r\n            alert('You know this already')\r\n        } else if(!activeUser.data.learningLanguage.includes(newLearningLanguage)){\r\n            let updatedLanguages = [...activeUser.data.learningLanguage, newLearningLanguage]\r\n            setActiveUser((prevState) => {\r\n                const newState = Object.assign({}, prevState);\r\n                newState.data.learningLanguage = updatedLanguages;\r\n                return newState;\r\n            });\r\n        } else {\r\n            alert('Already Learning')\r\n        }\r\n    };\r\n\r\n    const deleteLanguage = (languageToDelete) => {\r\n        let updatedLanguages = activeUser.data.learningLanguage.filter(element => element !== languageToDelete)\r\n        if(window.confirm('Really Delete Language?')){\r\n            setActiveUser((prevState) => {\r\n                const newState = Object.assign({}, prevState);\r\n                newState.data.learningLanguage = updatedLanguages;\r\n                return newState;\r\n            });\r\n        };\r\n    }\r\n\r\n    // May want to change this function later to allow for ANY user changes\r\n    useEffect(() => {\r\n        if(uniqueId){\r\n            async function updateUserLanguage() {\r\n                console.log('LANGUAGE CHANGED')\r\n                console.log(activeUser)\r\n                try {\r\n                    const updatedUser = await axios.put(`https://app.yawe.dev/api/1/ce/non-auth-endpoint?key=b0188b53ea77419ba1d6dcda06e4bea9&uniqueId=${uniqueId}`, \r\n                    activeUser.data,\r\n                    { withCredentials: true },\r\n                    { headers: {'Content-Type': 'application/json'}}\r\n                    )\r\n                    console.log('UPDATED USER')\r\n                    console.log(updatedUser.data)\r\n                } catch (error) {\r\n                    console.log(error)\r\n                }\r\n            }\r\n            updateUserLanguage();\r\n        };\r\n    }, [activeUser])\r\n\r\n    if(!activeUser) {\r\n        return(\r\n            <div className=\"lds-ellipsis\"><div></div><div></div><div></div><div></div></div>\r\n        )\r\n    } else {\r\n        return(\r\n            <div className='profile-data'>\r\n                <div className='username-and-flag-container'>\r\n                    <h1 className='profile-name'>{activeUser.data.username}</h1>\r\n                    <img className='native-language-flag' src={nativeLanguageFlag} alt='flag-showing-native-language'></img>\r\n                    <p className='member-for'> Member for {formatDistance(parseISO(userCreatedDate), new Date())}</p>\r\n                </div>\r\n                \r\n                <div className='learning-languages-container'>\r\n                    <h1>Languages Being Studied</h1>\r\n                    {activeUser.data.learningLanguage.map((language) => (\r\n                        <div className='learning-languages-individual'>\r\n                        <h2>{language}</h2>\r\n                        <FaTrashAlt className='learning-languages-individual-button'\r\n                        onClick={e => deleteLanguage(language)}\r\n                        >Delete</FaTrashAlt>\r\n                        </div>\r\n                    ))}\r\n                    \r\n                </div>\r\n                <div className='another-language-div'>\r\n                        <h3>Another Language?</h3>\r\n                        <div className='another-language-select'>\r\n                        <select onChange={e => setNewLearningLanguage(e.currentTarget.value)} \r\n                        id=\"learningLanguage\" \r\n                        name=\"learningLanguage\"\r\n                        placeholder=\"Another Language?\">\r\n                            <option value=\"English\">English</option>\r\n                            <option value=\"Russian\">Russian</option>\r\n                            <option value=\"Portuguese\">Portuguese</option>\r\n                            <option value=\"Spanish\">Spanish</option>\r\n                        </select>\r\n                        <button onClick={addLanguage} className='uibutton'>Add</button>\r\n                        </div>\r\n                    </div>\r\n            </div>\r\n        )\r\n    }\r\n};\r\n\r\n","C:\\Users\\user\\word-associations\\src\\components\\VocabInfo.js",["84","85"],"C:\\Users\\user\\word-associations\\src\\components\\WordAPI.js",["86"],"import React, { useState, useEffect } from 'react';\r\nimport axios from 'axios';\r\nimport '../styles/VocabInfo.scss';\r\n\r\nexport default function WordAPI (props) {\r\n    const [APIdefinition, setAPIDefinition] = useState('');\r\n    const [APIexample, setAPIExample] = useState('');\r\n    const [APIpronunciation, setAPIPronunciation] = useState('');\r\n    const [definitionNumber, setDefinitionNumber] = useState(0);\r\n    const [previousDefinitionButton, setPreviousDefinitionButton] = useState(false)\r\n\r\n    useEffect(() => {\r\n        async function WordAPICall () {\r\n            try {\r\n                const result = await axios.get(`https://wordsapiv1.p.rapidapi.com/words/${props.vocabItem}`,\r\n                    {headers: {\r\n                        'x-rapidapi-key': 'f74c925871msh70f9c315d6fed91p101f0cjsn861ef3bc1f60',\r\n                        'x-rapidapi-host': 'wordsapiv1.p.rapidapi.com'\r\n                    }})\r\n                    setAPIPronunciation(result.data.pronunciation.all);\r\n                    setAPIDefinition(result.data.results[definitionNumber].definition);\r\n                    setAPIExample(result.data.results[definitionNumber].examples[0]);             \r\n                } catch (error) {\r\n                console.log(error)\r\n            }\r\n        }\r\n        WordAPICall();\r\n    },[definitionNumber]);\r\n\r\n    const toggleDefinitionNumber = (e) => {\r\n        if(previousDefinitionButton === true && definitionNumber >= 0){\r\n            setPreviousDefinitionButton(false)\r\n        }\r\n        let newNumber;\r\n        e.target.dataset.index === 'forward' \r\n        ? newNumber = definitionNumber +1 \r\n        : newNumber = definitionNumber -1\r\n        setDefinitionNumber(newNumber);\r\n        if(definitionNumber === 0){\r\n            setPreviousDefinitionButton(true)\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className='vocab-item-api-data'>\r\n            <h3>Pronunciation</h3>\r\n                <h2>{APIpronunciation}</h2>\r\n            <h3>Definition</h3>\r\n                <h2>{APIdefinition}</h2>\r\n            <h3>Example</h3>\r\n                <h2>{APIexample}</h2>\r\n            <button data-index='back' disabled={previousDefinitionButton} onClick={e => toggleDefinitionNumber(e)}>Previous Definition</button>\r\n            <button data-index='forward' onClick={e => toggleDefinitionNumber(e)}>Next Definition</button>\r\n        </div>\r\n    )\r\n}",{"ruleId":"87","replacedBy":"88"},{"ruleId":"89","replacedBy":"90"},{"ruleId":"91","severity":1,"message":"92","line":54,"column":7,"nodeType":"93","endLine":54,"endColumn":9,"suggestions":"94"},{"ruleId":"91","severity":1,"message":"95","line":145,"column":8,"nodeType":"93","endLine":145,"endColumn":20,"suggestions":"96"},{"ruleId":"91","severity":1,"message":"92","line":29,"column":7,"nodeType":"93","endLine":29,"endColumn":9,"suggestions":"97"},{"ruleId":"91","severity":1,"message":"98","line":75,"column":8,"nodeType":"93","endLine":75,"endColumn":20,"suggestions":"99"},{"ruleId":"91","severity":1,"message":"92","line":32,"column":7,"nodeType":"93","endLine":32,"endColumn":9,"suggestions":"100"},{"ruleId":"91","severity":1,"message":"98","line":75,"column":8,"nodeType":"93","endLine":75,"endColumn":20,"suggestions":"101"},{"ruleId":"91","severity":1,"message":"92","line":32,"column":7,"nodeType":"93","endLine":32,"endColumn":9,"suggestions":"102"},{"ruleId":"91","severity":1,"message":"95","line":108,"column":8,"nodeType":"93","endLine":108,"endColumn":20,"suggestions":"103"},{"ruleId":"91","severity":1,"message":"92","line":25,"column":7,"nodeType":"93","endLine":25,"endColumn":9,"suggestions":"104"},{"ruleId":"91","severity":1,"message":"98","line":47,"column":8,"nodeType":"93","endLine":47,"endColumn":20,"suggestions":"105"},{"ruleId":"91","severity":1,"message":"106","line":28,"column":7,"nodeType":"93","endLine":28,"endColumn":25,"suggestions":"107"},"no-native-reassign",["108"],"no-negated-in-lhs",["109"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'getActiveUser'. Either include it or remove the dependency array.","ArrayExpression",["110"],"React Hook useEffect has a missing dependency: 'uniqueId'. Either include it or remove the dependency array.",["111"],["112"],"React Hook useEffect has missing dependencies: 'props' and 'uniqueId'. Either include them or remove the dependency array. However, 'props' will change when *any* prop changes, so the preferred fix is to destructure the 'props' object outside of the useEffect call and refer to those specific props inside useEffect.",["113"],["114"],["115"],["116"],["117"],["118"],["119"],"React Hook useEffect has a missing dependency: 'props.vocabItem'. Either include it or remove the dependency array.",["120"],"no-global-assign","no-unsafe-negation",{"desc":"121","fix":"122"},{"desc":"123","fix":"124"},{"desc":"121","fix":"125"},{"desc":"126","fix":"127"},{"desc":"121","fix":"128"},{"desc":"126","fix":"129"},{"desc":"121","fix":"130"},{"desc":"123","fix":"131"},{"desc":"121","fix":"132"},{"desc":"126","fix":"133"},{"desc":"134","fix":"135"},"Update the dependencies array to be: [getActiveUser]",{"range":"136","text":"137"},"Update the dependencies array to be: [activeUser, uniqueId]",{"range":"138","text":"139"},{"range":"140","text":"137"},"Update the dependencies array to be: [activeUser, props, uniqueId]",{"range":"141","text":"142"},{"range":"143","text":"137"},{"range":"144","text":"142"},{"range":"145","text":"137"},{"range":"146","text":"139"},{"range":"147","text":"137"},{"range":"148","text":"142"},"Update the dependencies array to be: [definitionNumber, props.vocabItem]",{"range":"149","text":"150"},[2091,2093],"[getActiveUser]",[5496,5508],"[activeUser, uniqueId]",[1123,1125],[2724,2736],"[activeUser, props, uniqueId]",[1117,1119],[2684,2696],[1277,1279],[4518,4530],[883,885],[1744,1756],[1307,1325],"[definitionNumber, props.vocabItem]"]